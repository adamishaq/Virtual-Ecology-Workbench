package VEW.Documenter2;

import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;

import VEW.Common.DateDialog;
import VEW.Common.StringTools;
import VEW.Common.XML.XMLFile;
import VEW.Common.XML.XMLTag;
import VEW.Controller2.EventPanel;
import VEW.Controller2.OutputDialog2;
import VEW.Scenario2.Generator;
import VEW.Scenario2.ScenarioPanel2;

public class Documenter {

  private PrintWriter html = null;
  private static final String missingField = "Default";
  private LinkedList mFunctionVars;
  private static final GregorianCalendar mStartDate = new GregorianCalendar(DateDialog.GMTTimeZone);
  private static final GregorianCalendar mEndDate = new GregorianCalendar(DateDialog.GMTTimeZone);
  private int mStepLength;

  // hashmap to attach names to variable types
  private HashMap mVariableTypes;

  public Documenter() {
    mFunctionVars = new LinkedList();
    mVariableTypes = new HashMap();
    mVariableTypes.put("Variables", "Variables");
    mVariableTypes.put("fgvar", "fgvar");
    mVariableTypes.put("colvar", "column");
    mVariableTypes.put("variable", "variable");
    mVariableTypes.put("parameter", "parameter");
    mVariableTypes.put("chemvar", "chemistry");
    mVariableTypes.put("phyvar", "physics");
    mVariableTypes.put("sysvar", "system");
    mVariableTypes.put("local", "local");
    mVariableTypes.put("biovar", "biology");
    mVariableTypes.put("varietyconcentration", "food-set");
    mVariableTypes.put("varietyparameter", "food-set parameter");
    mVariableTypes.put("varietyvariable", "food-set variable");
    mVariableTypes.put("varietylocal", "food-set local");
  }

  public static void main(String[] args) {
    run("model.xml", "document.html");
  }

  public static void run(String modelFileName, String htmlFileName) {
    XMLFile modelFile = XMLFile.LoadFile(modelFileName);
    Documenter documenter = new Documenter();
    documenter.generateDocument(modelFile, htmlFileName);
  }

  public static void run(XMLFile modelFileTag, String htmlFileName) {
    Documenter documenter = new Documenter();
    documenter.generateDocument(modelFileTag, htmlFileName);
  }

  /**
   * Create the HTML document
   */
  public boolean generateDocument(XMLFile modelFile, String fileName) {
    try {
      html = new PrintWriter(new FileOutputStream(new File(fileName)));
    } catch (IOException e) {
      return false;
    }

    if (html != null) {
      html.println("<html>");
      generateHeader(modelFile);
      generateBiology(modelFile);
      generateChemistry(modelFile);
      generateScenario(modelFile);
      generateNewOutputOptions(modelFile);
      html.println("<!--VEW model documentation. Auto-generated by Documenter.-->");
      html.println("</html>");
      html.flush();
      html.close();
      return true;

    } else {
      // error
      return false;
    }
  }

  private void generateHeader(XMLFile modelFile) {
    String name;
    boolean pigment;

    html.println("<head><title>" + cleanName(modelFile.getValue("modelname"), true) + " Model, Virtual Ecology Workbench 3.1</title>");
    html.println("</head>");
    
    html.println("<h1>" + cleanName(modelFile.getValue("modelname"), true) + "</h1>");
    html.println("<br><br><table>");
    html.println("<tr><td><big><b>Model Name &nbsp;&nbsp;</b></big></td><td>" + cleanName(modelFile.getValue("modelname"), true) + "</td></tr>");
    html.println("<tr><td><big><b>Author &nbsp;&nbsp;</b></big></td><td>"+StringTools.htmlFromXMLStripped(modelFile.getValue("modelauthor"))+ "</td></tr>");
    html.println("<tr><td><big><b>Comments &nbsp;&nbsp;</b></big></td><td>"+StringTools.htmlFromXMLStripped(modelFile.getValue("modeltext"))+"</td></tr>");
    html.println("</table>");

    html.println("<br><br><table>");
    html.println("<tr><td><big><b>Version Name &nbsp;&nbsp;</b></big></td><td>" + cleanName(modelFile.getValue("buildname"), true) + "</td></tr>");
    html.println("<tr><td><big><b>Author &nbsp;&nbsp;</b></big></td><td>"+StringTools.htmlFromXML(modelFile.getValue("buildauthor"))+ "</td></tr>");
    html.println("<tr><td><big><b>Comments &nbsp;&nbsp;</b></big></td><td>"+StringTools.htmlFromXMLStripped(modelFile.getValue("buildtext"))+"</td></tr>");
    html.println("</table>");

    // print contents
    html.println("<hr>");
    html.println("<h2>Contents</h2>");
    html.println("<a href=\"#intro\">1. Introduction</a><br>");
    html.println("<a href=\"#bio\">2. Biology</a><br>");

    XMLTag[] functionalGroups = modelFile.getTags("functionalgroup");
    for (int i = 0; i < functionalGroups.length; i++) {
      XMLTag f = functionalGroups[i];
      name = "2." + (i + 1) + " ";
      if (f.getTag("name") != null) name += f.getTag("name").getValue();
      else name += "(No Name)";

      html.println("&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#f" + (i + 1) + "\"><small> " + name + "</small></a><br>");
      html.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#f" + (i + 1) + "1\"><small>2." + (i + 1) + ".1 Stages</small></a><br>");
      html.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#f" + (i + 1) + "2\"><small>2." + (i + 1) + ".2 Parameters</small></a><br>");
      html.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#f" + (i + 1) + "3\"><small>2." + (i + 1) + ".3 Functions</small></a><br>");
      html.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#f" + (i + 1) + "4\"><small>2." + (i + 1) + ".4 Species</small></a><br>");
    }

    html.println("<a href=\"#chem\">3. Chemistry</a><br>");

    XMLTag[] chemicals = modelFile.getTags("chemical");
    for (int i = 0; i < chemicals.length; i++) {
      XMLTag f = chemicals[i];
      name = "3." + (i + 1) + " ";
      if (f.getTag("name") != null) name += f.getTag("name").getValue();
      else name += "(No Name)";

      if (f.getTag("pigment") != null) {
        if (f.getTag("pigment").getValue().compareTo("true") == 0) {
          name += "<i> (pigment) </i>";
          pigment = true;
        } else pigment = false;
      } else pigment = false;

      html.println("&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#c" + (i + 1) + "\"><small> " + name + "</small></a><br>");

      html.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#c" + (i + 1) + "1\"><small>3." + (i + 1) + ".1 Parameters</small></a><br>");
      html.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#c" + (i + 1) + "2\"><small>3." + (i + 1) + ".2 Functions</small></a><br>");
      if (pigment) html.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#c" + (i + 1) + "3\"><small>3." + (i + 1) + ".3 Spectra</small></a><br>");
    }

    html.println("<a href=\"#scen\">4. Scenario</a><br>");
    html.println("&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#scen1\"><small>4.1 Water Column</small></a><br>");
    html.println("&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#scen2\"><small>4.2 Initial Conditions</small></a><br>");
    html.println("&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#scen3\"><small>4.3 Boundary Conditions</small></a><br>");
    html.println("&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#scen4\"><small>4.4 Closure</small></a><br>");

    XMLTag[] predators = modelFile.getTags("scenario/closure/predator");
    for (int i = 0; i < predators.length; i++) {
      XMLTag f = predators[i];
      name = "4.4." + (i + 1) + " ";
      if (f.getTag("name") != null) name += f.getTag("name").getValue();
      else name += "(No Name)";
      html.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#pred" + (i + 1) + "\"><small> " + name + "</small></a><br>");
    }

    html.println("&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#scen5\"><small>4.5 Events</small></a><br>");

    XMLTag[] events = modelFile.getTags("scenario/events/event");
    for (int i = 0; i < events.length; i++) {
      XMLTag f = events[i];
      name = "4.5." + (i + 1) + " ";
      if (f.getTag("name") != null) name += f.getTag("name").getValue();
      else name += "(No Name)";

      html.println("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#event" + (i + 1) + "\"><small> " + name + "</small></a><br>");
    }

    html.println("&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#scen6\"><small>4.6 Chemical Conservation</small></a><br>");

    html.println("<a href=\"#output\">5. Output Options</a><br>");

    // print introduction
    html.println("<hr>");
    if (modelFile.getValue("comment") != null) html.println("<a name=\"intro\"><h2>1. Introduction</h2></a><p>" + modelFile.getValue("comment") + "</p>");
    else html.println("<a name=\"intro\"><h2>1. Introduction</h2></a><p> No introduction available</p>");

    html.println("<br>");

  }

  private void generateBiology(XMLFile modelFile) {
    XMLTag[] stages;
    XMLTag[] species;
    XMLTag[] parameters;
    XMLTag[] functions;
    // XMLTag[] equations;
    XMLTag comment = null;
    String name/* , varName */;
    // XMLTag variableTag;

    html.println("<hr>");
    html.println("<a name=\"bio\"><h2>2. Biology </h2></a>");
    XMLTag[] functionalGroups = modelFile.getTags("functionalgroup");
    for (int i = 0; i < functionalGroups.length; i++) {
      XMLTag f = functionalGroups[i];

      if (f.getTag("name") != null) name = f.getTag("name").getValue();
      else name = "(No Name)";

      if (f.getTag("predator") != null) {
        if (f.getTag("predator").getValue().compareTo("true") == 0) {
          name += "<i> - predator (see section 4.4 for closure conditions) </i>";
        }
      }

      html.println("<br><a name=\"f" + (i + 1) + "\"><h3>2." + (i + 1) + " " + name + "</h3></a>");

      comment = f.getTag("comment");
      if (comment != null) {
        html.println("<p>" + comment + "</p>");
      }

      html.println("<a name=\"f" + (i + 1) + "1\"><h3>2." + (i + 1) + ".1 Stages</h3></a>");
      stages = f.getTags("stage");

      html.println("<table border=\"1\">");
      html.println("<tr>");
      html.println("<th>Stage</th>");
      html.println("<th>Description</th>");
      html.println("</tr>");

      for (int j = 0; j < stages.length; j++) {
        html.println("<tr>");
        if (stages[j].getTag("name") != null) html.println("<td>" + stages[j].getTag("name").getValue() + "</td>");
        else html.println("<td>N/A</td>");
        if (stages[j].getTag("comment") != null) html.println("<td>" + stages[j].getTag("comment").getValue() + "&nbsp;" + "</td>");
        else html.println("<td>N/A</td>");
        html.println("</tr>");
      }
      html.println("</table>");
      html.println("<br>");
      html.println("<br>");

      html.println("<a name=\"f" + (i + 1) + "2\"><h3>2." + (i + 1) + ".2 Parameters</h3></a>");
      parameters = XMLTag.sortTags(f.getTags("parameter"),"name");

      html.println("<table border=\"1\">");
      html.println("<tr>");
      html.println("<th>Parameter</th>");
      html.println("<th>Description</th>");
      html.println("<th>Default Value</th>");
      html.println("<th>Unit</th>");
      html.println("</tr>");

      for (int j = 0; j < parameters.length; j++) {
        html.println("<tr>");
        if (parameters[j].getTag("name") != null) html.println("<td>" + parameters[j].getTag("name").getValue() + "</td>");
        else html.println("<td>N/A</td>");
        if (parameters[j].getTag("desc") != null) html.println("<td>" + parameters[j].getTag("desc").getValue() + "</td>");
        else html.println("<td>N/A</td>");
        if (parameters[j].getTag("value") != null) html.println("<td>" + formatNumber(parameters[j].getTag("value").getValue()) + "</td>");
        else html.println("<td>N/A</td>");
        if (parameters[j].getTag("unit") != null) html.println("<td>" + formatUnit(parameters[j].getTag("unit").getValue()) + "</td>");
        else html.println("<td>N/A</td>");
        html.println("</tr>");
      }
      html.println("</table>");
      html.println("<br>");
      html.println("<br>");

      html.println("<a name=\"f" + (i + 1) + "3\"><h3>2." + (i + 1) + ".3 Functions</h3></a>");
      functions = f.getTags("function");
      if (functions.length == 0) {
        html.println("<p>&nbsp;&nbsp;&nbsp;&nbsp; No functions specified</p>");
      }
      for (int j = 0; j < functions.length; j++) {
        if (functions[j].getTag("name") != null) name = functions[j].getTag("name").getValue();
        else name = "(No name)";
        html.println("<h4>2." + (i + 1) + ".3." + (j + 1) + " " + name + "</h4>");

        generateFunction(functions[j], functionalGroups[i], modelFile);

        html.println("<br><br>");
      }


      html.println("<a name=\"f" + (i + 1) + "4\"><h3>2." + (i + 1) + ".4 Species</h3></a>");
      species = modelFile.getTag("species").getTagsWhere("species","@fg",functionalGroups[i].getValue("name"));
      if (species.length == 0) {
        html.println("<p>&nbsp;&nbsp;&nbsp;&nbsp; No species specified</p>");
      }
      for (int j = 0; j < species.length; j++) {
        if (species[j].getAttribute("name") != null) name = species[j].getAttribute("name");
        else name = "(No name)";
        html.println("<h4>2." + (i + 1) + ".5." + (j + 1) + " " + name + "</h4>");

        generateSpecies(species[j], functionalGroups[i], modelFile);
        html.println("<br><br>");
      }

    }

  }

  private void generateScenario(XMLFile modelFile) {
    XMLTag[] parameters, events;
    XMLTag[] functions;
    XMLTag scenario, init, closure, eventslist, conserve, comment = null;
    String name;


    html.println("<hr>");
    html.println("<br><br><a name=\"scen\"><h2>4. Scenario </h2></a>");

    scenario = modelFile.getTag("track");

    if (scenario == null) {
      html.println("<p> No information on scenario</p>");
      return;
    }

    html.println("<br><a name=\"scen1\"><h3>4.1 Water Column</h3></a>");
    html.println("<table border=\"1\">");

    
    mStartDate.setTimeInMillis(Long.parseLong(modelFile.getValue("track/start")));
    mEndDate.setTimeInMillis(Long.parseLong(modelFile.getValue("track/end")));
    html.println("<tr><td>Start Date</td><td>" + DateDialog.getString(mStartDate)+"</td></tr>");
    html.println("<tr><td>End Date</td><td>" + DateDialog.getString(mEndDate)+"</td></tr>");
      
    if (scenario.getTag("secstep") != null) mStepLength = Integer.parseInt(scenario.getValue("secstep"));
    else mStepLength = 1800; // half hour by default ###?
      
    int years, months, days, hours, minutes, seconds;
    years = mEndDate.get(GregorianCalendar.YEAR) - mStartDate.get(GregorianCalendar.YEAR);
    months = mEndDate.get(GregorianCalendar.MONTH) - mStartDate.get(GregorianCalendar.MONTH);
    days = mEndDate.get(GregorianCalendar.DAY_OF_MONTH) - mStartDate.get(GregorianCalendar.DAY_OF_MONTH);
    hours = mEndDate.get(GregorianCalendar.HOUR_OF_DAY) - mStartDate.get(GregorianCalendar.HOUR_OF_DAY);
    minutes = mEndDate.get(GregorianCalendar.MINUTE) - mStartDate.get(GregorianCalendar.MINUTE);
    seconds = mEndDate.get(GregorianCalendar.SECOND) - mStartDate.get(GregorianCalendar.SECOND);

    String year;
    if (years == 1) year = " year, ";
    else year = " years, ";
    String month;
    if (months == 1) month = " month, ";
    else month = " months, ";
    String day;
    if (days == 1) day = " day, ";
    else day = " days, ";
    String hour;
    if (hours == 1) hour = " hour, ";
    else hour = " hours, ";
    String minute;
    if (minutes == 1) minute = " minute, ";
    else minute = " minutes, ";
    String second;
    if (seconds == 1) second = " second";
    else second = " seconds";

    html.println("<tr><td>Duration</td><td>" + years + year + months + month + days + day + hours + hour + minutes + minute + seconds + second + "</td></tr>");
    html.println("<tr><td>Time Step Length</td><td>" + (mStepLength / 60) + minute + (mStepLength % 60) + second + "</td></tr>");

    if (scenario.getTag("trackmode") != null) html.println("<tr><td>Integration Method</td><td>" + scenario.getValue("trackmode")+ "</td></tr>");
    else html.println("<tr><td>Integration Method</td><td>N/A</td></tr>");
    if ((scenario.getTag("trackmode")!=null) && (!scenario.getValue("trackmode").equals(Generator.INT_FIX))) {
      if (scenario.getTag("velocityfield") != null) html.println("<tr><td>Velocity Field</td><td>" + scenario.getValue("velocityfield") + "</td></tr>");
      else html.println("<tr><td>Velocity Field</td><td>N/A</td></tr>");
    }
    if (modelFile.getTag("initialconditions")!=null)
      if (modelFile.getTag("initialconditions").getAttribute("size")!=null)
        html.println("<tr><td>Max Depth</td><td>"+modelFile.getTag("initialconditions").getAttribute("size")+"</td></tr>");
    if (scenario.getTag("longitude") != null) html.println("<tr><td>Longitude</td><td>" + scenario.getTag("longitude").getValue() + "</td></tr>");
    else html.println("<tr><td>Longitude</td><td>N/A</td></tr>");
    if (scenario.getTag("latitude") != null) html.println("<tr><td>Latitude</td><td>" + scenario.getTag("latitude").getValue() + "</td></tr>");
    else html.println("<tr><td>Latitude</td><td>N/A</td></tr>");


    XMLTag boundaryTag = modelFile.getTag("boundaryconditions");
    if (boundaryTag!=null) {
      if (boundaryTag.getTag("climatedata") != null) {
        html.println("<tr><td>Climate Data</td><td>" + boundaryTag.getValue("climatedata") + "</td></tr>");
        if (!boundaryTag.getValue("climatedata").equals(ScenarioPanel2.BUNKER)) {
          if (boundaryTag.getValue("heatflux").equals(ScenarioPanel2.ERA40_READ_FLUX))
            html.println("<tr><td>Heat Flux</td><td>Use Supplied ERA40</td></tr>");
          else if (boundaryTag.getValue("heatflux").equals(ScenarioPanel2.ERA40_CALCULATE_FLUX))
            html.println("<tr><td>Heat Flux</td><td>Calculate from emergent properties</td></tr>");
        }
        if (boundaryTag.getValue("climatedata").equals(ScenarioPanel2.ERA40_SINGLE)) {
          html.println("<tr><td>Cycle year</td><td>"+boundaryTag.getValue("year")+"</td></tr>");
        }
      }
      else html.println("<tr><td>Climate Data</td><td>N/A</td></tr>");
    }      
    html.println("</table>");

    html.println("<br><br><a name=\"scen2\"><h3>4.2 Initial Conditions</h3></a>");
    init = modelFile.getTag("initialconditions");
    if (init == null) {
      html.println("<p> No initial conditions specified</p>");
    } else {
      html.println("<p>&nbsp;&nbsp;Turbocline = &nbsp;&nbsp;" + init.getValue("turbocline") + "</p>");
      
      html.println("<p>&nbsp;&nbsp;Fields: &nbsp;&nbsp;</p>");

      XMLTag[] fields = init.getTags("field");
      if (fields.length > 0) {
        String[][] fieldTable = new String[fields.length][500];

        html.println("<table border =\"1\">");
        html.println("<th>Depth (m)</th>");

        for (int i = 0; i < fields.length; i++) {
          XMLTag field = fields[i];
          name = "";
          if (field.getAttribute("name") != null) name = field.getAttribute("name")+ "<br>";
          else name = "(No Name)<br>";

          if (field.getAttribute("source") != null) name += "<i><small>(Source: " + field.getAttribute("source") + ")</small></i>";
          else name += "<i><small>(No source)</small></i>";
          html.println("<th>" + name + "</th>");

          fieldTable[i] = StringTools.nestedSplit(field.getValue(), ',');
        }
        int depth;
        if (modelFile.getTag("initialconditions") != null) 
          depth = Integer.parseInt(modelFile.getTag("initialconditions").getAttribute("size"));
        else depth = 0;

        for (int i = 0; i < depth; i++) {
          html.println("<tr><td>" + (i + 1) + "</td>");
          for (int j = 0; j < fields.length; j++) {
            if (fieldTable[j][0] == "N/A") html.println("<td>N/A</td>");
            else html.println("<td>" + fieldTable[j][i] + "</td>");
          }
          html.println("</tr>");
        }

        html.println("</table>");
      } else {
        html.println("<p>&nbsp;&nbsp;No fields</p>");
      }
    }

    html.println("<br><br><a name=\"scen3\"><h3>4.3 Closure</h3></a>");
    closure = modelFile.getTag("closure");
    if (closure == null) {
      html.println("<p> No closure conditions specified</p>");
    } else {
      XMLTag[] predators = closure.getTags("predator");
      if (predators.length > 0) {
        for (int i = 0; i < predators.length; i++) {
          XMLTag f = predators[i];

          if (f.getTag("name") != null) name = f.getTag("name").getValue();
          else name = "(No Name)";

          html.println("<a name=\"pred" + (i + 1) + "\"><h3>4.4." + (i + 1) + " " + name + "</h3></a>");

          comment = f.getTag("comment");
          if (comment != null) {
            html.println("<p>" + comment.getValue() + "</p>");
          }

          html.println("<h4>4.4." + (i + 1) + ".1 Parameters</h4>");
          parameters = f.getTags("parameter");

          html.println("<table border=\"1\">");
          html.println("<tr>");
          html.println("<th>Parameter</th>");
          html.println("<th>Description</th>");
          html.println("<th>Default Value</th>");
          html.println("<th>Unit</th>");
          html.println("</tr>");

          for (int j = 0; j < parameters.length; j++) {
            html.println("<tr>");
            if (parameters[j].getTag("name") != null) html.println("<td>" + parameters[j].getTag("name").getValue() + "</td>");
            else html.println("<td>N/A</td>");
            if (parameters[j].getTag("desc") != null) html.println("<td>" + parameters[j].getTag("desc").getValue() + "</td>");
            else html.println("<td>N/A</td>");
            if (parameters[j].getTag("value") != null) html.println("<td>" + formatNumber(parameters[j].getTag("value").getValue()) + "</td>");
            else html.println("<td>N/A</td>");
            if (parameters[j].getTag("unit") != null) html.println("<td>" + formatUnit(parameters[j].getTag("unit").getValue()) + "</td>");
            else html.println("<td>N/A</td>");
            html.println("</tr>");
          }
          html.println("</table>");
          html.println("<br>");
          html.println("<br>");

          html.println("<h4>4.4." + (i + 1) + ".2 Functions</h4>");
          functions = f.getTags("function");
          if (functions.length == 0) {
            html.println("<p>&nbsp;&nbsp;&nbsp;&nbsp; No functions specified</p>");
          }
          for (int j = 0; j < functions.length; j++) {
            if (functions[j].getTag("name") != null) name = functions[j].getTag("name").getValue();
            else name = "(No name)";
            html.println("<h4>4.4." + (i + 1) + ".2." + (j + 1) + " " + name + "</h4>");
            generateFunction(functions[j], predators[i], modelFile);
            html.println("<br><br>");
          }
        }
      } else {
        html.println("<p> No predators specified</p>");
      }
    }

    html.println("<br><br><a name=\"scen4\"><h3>4.4 Events</h3></a>");
    eventslist = modelFile.getTag("events");
    if ((eventslist == null) || (eventslist.getTags("event").length==0)) {
      html.println("<p>No events specified</p>");
    } else {
      events = eventslist.getTags("event");
      for (int i = 0; i < events.length; i++) {
        XMLTag f = events[i];
        if (f.getTag("name") != null) name = f.getTag("name").getValue();
        else name = "(No Name)";
        html.println("<a name=\"event" + (i + 1) + "\"><h3>4.5." + (i + 1) + " " + name + "</h3></a>");
        html.println("<table border = \"1\">");

        GregorianCalendar eventDate = new GregorianCalendar(DateDialog.GMTTimeZone);
        // <event val="2.5" continuous="true" scope="Water Column" op="Add" name="Heat correction" item="Heat Flux" mld="true" />
        if ((f.getAttribute("continuous")!=null) && (f.getAttribute("continuous").equals("true"))) {
          html.println("<tr><td>Date</td><td>Continuous</td></tr>");
        } else {
          eventDate.setTimeInMillis(Long.parseLong(f.getAttribute("start")));
          html.println("<tr><td>From</td><td>"+DateDialog.getString(eventDate)+"</td></tr>");
          eventDate.setTimeInMillis(Long.parseLong(f.getAttribute("end")));          
          html.println("<tr><td>Until</td><td>"+DateDialog.getString(eventDate)+"</td></tr>");
          html.println("<tr><td>Every</td><td>"+f.getAttribute("interval")+" "+f.getAttribute("intervalUnit")+"</td></tr>");
       }
       if (!f.getAttribute("scope").equals(EventPanel.WATER_COLUMN)) {
         if ((f.getAttribute("alldepth")!=null) && (f.getAttribute("alldepth").equals("true"))) {
           html.println("<tr><td>Depths</td><td>All of column</td></tr>");
         } else {
           html.println("<tr><td>Top depth</td><td>"+f.getAttribute("top")+" m</td></tr>");
           html.print("<tr><td>Bottom depth</td><td>");
           if ((f.getAttribute("mld")!=null) && (f.getAttribute("mld").equals("true")))
             html.println("Turbocline</td></tr>");
           else html.println(f.getAttribute("bottom")+" m</td></tr>");
         }
       }
       
       html.println("<tr><td>Change</td><td>"+f.getAttribute("scope")+":"+f.getAttribute("item")+"</td></tr>");
       html.println("<tr><td>Function</td><td>"+f.getAttribute("op")+" "+f.getAttribute("val")+"</td></tr>");
     }
     html.println("</table>");
     html.println("<br>");
     html.println("<br>");
   }

    // print chemical conservation information
    // print events
    html.println("<br><br><a name=\"scen5\"><h3>4.5 Chemical Conservation</h3></a>");
    conserve = modelFile.getTag("chemrecycle");
    if (conserve == null) {
      html.println("<p>- No conservation procedure specified</p>");
      return;
    }

    if (conserve.getTag("useCC") != null) {
      if (conserve.getTag("useCC").getValue().compareTo("true") == 0) {
        html.println("<p>- Chemical conservation enabled<p>");
        if (conserve.getTag("detecttime") != null) {
          if (conserve.getTag("detecttime").getValue().compareTo("true") == 0) {
            html.println("<p>- System to detect best time to apply correction<p>");
          }
        }
        if (conserve.getTag("yearlyupdate") != null) {
          if (conserve.getTag("yearlyupdate").getValue().compareTo("true") == 0) {
            html.println("<p>- Apply correction yearly<p>");
          }
        }
        if (conserve.getTag("continuous") != null) {
          if (conserve.getTag("continuous").getValue().compareTo("true") == 0) {
            html.println("<p>- Apply correction continuously (every time step)<p>");
          }
        }

        if (conserve.getTag("startstep") != null) {
          GregorianCalendar date = new GregorianCalendar(DateDialog.GMTTimeZone);
          date.setTimeInMillis(Long.parseLong(conserve.getValue("start")));
          html.println("<p>- Starting on " + DateDialog.getString(date)+"</p>");
        }

        if (conserve.getTag("detectdepth") != null) {
          if (conserve.getTag("detectdepth").getValue().compareTo("true") == 0) {
            html.println("<p>- Automatically use deepest depth ");
            if (conserve.getTag("deepever") != null) {
              if (conserve.getTag("deepever").getValue().compareTo("true") == 0) {
                html.println("(in history of simulation)");
              }
            }
            if (conserve.getTag("deepyear") != null) {
              if (conserve.getTag("deepyear").getValue().compareTo("true") == 0) {
                html.println("(in previous year)");
              }
            }
            html.println("</p>");
          }
        }
        if (conserve.getTag("fixdepth") != null) {
          if (conserve.getTag("fixdepth").getValue().compareTo("true") == 0) {
            html.println("<p>- Correct from fixed depth ");
            if (conserve.getTag("depthtouse") != null) {
              html.println("(" + conserve.getTag("depthtouse").getValue() + ")");
            }
            html.println("</p>");
          }
        }

        html.println("<table><tr><td valign=\"top\">- Chemicals to be corrected for:</td><td>");

        XMLTag[] chemicals = conserve.getTags("chemical");
        if (chemicals.length == 0) {
          html.println("None");
        } else {
          html.println("<table>");
          for (int i = 0; i < chemicals.length; i++) html.println("<tr><td>" + chemicals[i].getValue()+ "</td></tr>");
          html.println("</table>");
        }
        html.println("</td></tr></table><br>");
       
      } else {
        html.println("<p>Chemical conservation disabled<p>");
      }
    } else {
      html.println("<p>Not using chemical conservation:<p>");
    }

  }

  private void generateChemistry(XMLFile modelFile) {
    XMLTag[] chemicals, parameters, spectra;
    XMLTag[] functions;
    // XMLTag[] equations;
    XMLTag comment = null;
    String name/* , varName */;
    XMLTag /* variableTag, */x;
    boolean pigment = false;

    html.println("<hr>");
    html.println("<br><br><a name=\"chem\"><h2>3. Chemistry </h2></a>");
    chemicals = modelFile.getTags("chemical");
    for (int i = 0; i < chemicals.length; i++) {
      XMLTag f = chemicals[i];

      if (f.getTag("name") != null) name = f.getTag("name").getValue();
      else name = "(No Name)";

      if (f.getTag("pigment") != null) {

        if (f.getTag("pigment").getValue().compareTo("true") == 0) {
          name += "<i> (pigment) </i>";
          pigment = true;
        } else {
          pigment = false;
        }
      } else {
        pigment = false;
      }

      html.println("<br><a name=\"c" + (i + 1) + "\"><h3>3." + (i + 1) + " " + name + "</h3></a>");

      comment = f.getTag("comment");
      if (comment != null) {
        html.println("<p>" + comment + "</p>");
      }

      html.println("<br><a name=\"c" + (i + 1) + "1\"><h3>3." + (i + 1) + ".1 Parameters</h3>");
      parameters = XMLTag.sortTags(f.getTags("parameter"),"name");

      if (parameters.length == 0) {
        html.println("<p>&nbsp;&nbsp;&nbsp;&nbsp; No parameters specified</p>");
      } else {
        html.println("<table border=\"1\">");
        html.println("<tr>");
        html.println("<th>Parameter</th>");
        html.println("<th>Description</th>");
        html.println("<th>Default Value</th>");
        html.println("<th>Unit</th>");
        html.println("</tr>");

        for (int j = 0; j < parameters.length; j++) {
          html.println("<tr>");
          if (parameters[j].getTag("name") != null) html.println("<td>" + parameters[j].getTag("name").getValue() + "</td>");
          else html.println("<td>N/A</td>");
          if (parameters[j].getTag("desc") != null) html.println("<td>" + parameters[j].getTag("desc").getValue() + "</td>");
          else html.println("<td>N/A</td>");
          if (parameters[j].getTag("value") != null) html.println("<td>" + formatNumber(parameters[j].getTag("value").getValue()) + "</td>");
          else html.println("<td>N/A</td>");
          if (parameters[j].getTag("unit") != null) html.println("<td>" + formatUnit(parameters[j].getTag("unit").getValue()) + "</td>");
          else html.println("<td>N/A</td>");
          html.println("</tr>");
        }
        html.println("</table>");
        html.println("<br>");
        html.println("<br>");

      }

      html.println("<br><a name=\"c" + (i + 1) + "2\"><h3>3." + (i + 1) + ".2 Functions</h3>");
      functions = f.getTags("function");
      if (functions.length == 0) {
        html.println("<p>&nbsp;&nbsp;&nbsp;&nbsp; No functions specified</p>");
      }
      for (int j = 0; j < functions.length; j++) {
        if (functions[j].getTag("name") != null) name = functions[j].getTag("name").getValue();
        else name = "(No name)";
        html.println("<h4>3." + (i + 1) + ".2." + (j + 1) + " " + name + "</h4>");

        generateFunction(functions[j], chemicals[i], modelFile);

        html.println("<br><br>");
      }

      if (pigment == true) {
        html.println("<br><a name=\"c" + (i + 1) + "3\"><h3>3." + (i + 1) + ".3 Spectra</h3>");
        spectra = f.getTags("spectrum");
        for (int j = 0; j < spectra.length; j++) {
          html.println("<table>");

          if (spectra[j].getTag("name") != null) name = spectra[j].getTag("name").getValue();
          else name = "No Name";
          html.println("<tr><td>" + name + "</td></tr>");

          x = spectra[j].getTag("equation");
          if (x != null) {
            x = x.getTag("eq");
            if (x != null) {
              html.println("<tr><td>");
              drawBarChart(x.getValue());
              html.println("</td></tr>");

            } else {
              html.println("<tr><td>No information on spectrum specified</td></tr>"); // ###
              // ?
            }
          } else {
            html.println("<tr><td>No information on spectrum specified</td></tr>"); // ###
            // ?
          }

          html.println("</table>");
          html.println("<br>");

        }

        html.println("<br>");
      }

    }

  }

  private void generateNewIntro(XMLTag tag, String title) {
    html.println("<big><b>" + title + "</b></big>");
    html.println("<table>");
    html.println("<tr><td>Frequency:</td><td>" + tag.getAttribute("freq") + "</td></tr>");
    long afterstep = 0;
    long untilstep = 0;
    if (tag.getAttribute("from") != null) afterstep = Long.parseLong(tag.getAttribute("from"));
    if (tag.getAttribute("to") != null) untilstep = Long.parseLong(tag.getAttribute("to"));
    GregorianCalendar after = new GregorianCalendar(DateDialog.GMTTimeZone);
    after.setTimeInMillis(afterstep);
    GregorianCalendar until = new GregorianCalendar(DateDialog.GMTTimeZone);
    until.setTimeInMillis(untilstep);

    html.println("<tr><td>From: </td><td>" + DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG).format(after.getTime()) + "</td></tr>");
    html.println("<tr><td>To: </td><td>" + DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG).format(until.getTime()) + "</td></tr>");
    html.println("<tr><td valign=\"top\">" + title + " Variables:</td><td>");

  }

  private void writeTagTypes(XMLTag audit, String scope) {
    XMLTag[] vars = audit.getTagsWhere("var","@scope",scope);
    if (vars.length>0) {
      html.println("<strong><u>"+scope+"</u></strong><br>");
      html.println("<table border=\"1\">");
      html.println("  <th>Name (Description)</th>");
      for (int i = 0; i < vars.length; i++) {

        html.println("<tr><td>"+vars[i].getAttribute("name")+"</td></tr>");
      }
      html.println("</table>");
      html.println("</td></tr>");
    }
  }

  private void generateNewOutputOptions(XMLFile modelFile) {
    html.println("<hr>");
    html.println("<br><br><a name=\"output\"><h2>5. Output Options </h2></a>");

    if (modelFile.getTag("output") == null) {
      html.println("Output Options not given");
    } else {

      XMLTag columnTag = modelFile.getTag("output/column");
      XMLTag phyField = modelFile.getTag("output/fieldphy");
      XMLTag bioField = modelFile.getTag("output/fieldbio");
      XMLTag chemField = modelFile.getTag("output/fieldchem");
      XMLTag demoField = modelFile.getTag("output/fielddemo");      

      if (columnTag != null) 
        if ((columnTag.getAttribute("active").equals("true")) && (columnTag.getTags("var").length>0)) {
          generateNewIntro(columnTag, "Water Column");
          generateNewVarOptionsTable(columnTag);
          html.println("</td></tr></table>");
      }

      if (bioField != null) 
        if ((bioField.getAttribute("active").equals("true")) && (bioField.getTags("var").length>0)) {
          generateNewIntro(bioField, "Biological Field Data");
          generateNewVarOptionsTable(bioField);
          html.println("</td></tr></table>");
      }
      
      if (chemField != null) 
        if ((chemField.getAttribute("active").equals("true")) && (chemField.getTags("var").length>0)) {
          generateNewIntro(chemField, "Chemical Field Data");
          generateNewVarOptionsTable(chemField);
          html.println("</td></tr></table>");
      }
      
      if (demoField != null) 
        if ((demoField.getAttribute("active").equals("true")) && (demoField.getTags("var").length>0)) {
          generateNewIntro(chemField, "Demograhic Field Data");
          generateNewVarOptionsTable(demoField);
          html.println("</td></tr></table>");
      }

      if (phyField != null) 
        if ((phyField.getAttribute("active").equals("true")) && (phyField.getTags("var").length>0)) {
          generateNewIntro(phyField, "Physical Field Data");
          generateNewVarOptionsTable(phyField);
          html.println("</td></tr></table>");
      }

      

      
      html.println("</table>");

      XMLTag[] species = modelFile.getTag("output").getTags("audit");
      for (int i = 0; i < species.length; i++) {
        XMLTag f = species[i];
        if ((f.getAttribute("active").equals("true")) && (f.getTags("var").length>0)) {
          html.println("<big><b>Audit Trails For " + f.getAttribute("species")+ "</b></big>");
          html.println("<table>");
          html.println("<tr><td>Frequency:</td><td>" + f.getAttribute("freq") + " steps</td></tr>");

          long afterstep = 0;
          long untilstep = 0;
          afterstep = Long.parseLong(f.getAttribute("from"));
          untilstep = Long.parseLong(f.getAttribute("to"));
 
          GregorianCalendar after = new GregorianCalendar(DateDialog.GMTTimeZone);
          after.setTimeInMillis(afterstep);
          GregorianCalendar until = new GregorianCalendar(DateDialog.GMTTimeZone);
          until.setTimeInMillis(untilstep);

          html.println("<tr><td>From: </td><td>" + DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG).format(after.getTime()) + "</td></tr>");
          html.println("<tr><td>To: </td><td>" + DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG).format(until.getTime()) + "</td></tr>");

          writeTagTypes(f, OutputDialog2.SCOPE_AT_AGENT);
          writeTagTypes(f, OutputDialog2.SCOPE_AT_BIOLOGICAL);
          writeTagTypes(f, OutputDialog2.SCOPE_AT_CHEMICAL);
          writeTagTypes(f, OutputDialog2.SCOPE_AT_INCHEMICAL);          
          writeTagTypes(f, OutputDialog2.SCOPE_AT_DEMOGRAPHIC);
          writeTagTypes(f, OutputDialog2.SCOPE_AT_PHYSICAL);
          writeTagTypes(f, OutputDialog2.SCOPE_AT_VARIETYBASED);
          writeTagTypes(f, OutputDialog2.SCOPE_AT_LOCAL);
          html.println("</table>");
          html.println("<br>");
        }
      }
    }
  }

  public void generateSpecies(XMLTag species, XMLTag functionalGroup, XMLFile modelFile) {
    String speciesName = species.getAttribute("name");

    // print base parameter for this species
    float xVal = Float.parseFloat(species.getAttribute("x"));
    html.println("<p>&nbsp;&nbsp;&nbsp;&nbsp;Base Parameter: &nbsp;&nbsp;" + formatNumber(xVal) + "</p>");
    
    // print parameters table

    html.println("<p>&nbsp;&nbsp;&nbsp;&nbsp;Parameters <i>(of the form a x base_parameter <sup>b</sup>)</i> : </p>");
    XMLTag[] parameters = XMLTag.sortTags(species.getTags("param"),"@name");

    html.println("<table><tr>");
    html.println("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>");
    html.println("<td><table border=\"1\" cellpadding=\"2\">");
    html.println("<tr>");
    html.println("<th>Name</th>");
    html.println("<th>a</th>");
    html.println("<th>b</th>");
    html.println("<th>Value</th>");
    html.println("</tr>");

    for (int i = 0; i < parameters.length; i++) {
      String name = parameters[i].getAttribute("name");
      float aValue = Float.parseFloat(parameters[i].getAttribute("a"));
      float bValue = Float.parseFloat(parameters[i].getAttribute("b"));
      html.println("<tr>");
      html.println("<td>" + name + "</td>");
      html.println("<td>" + formatNumber(aValue) + "</td>");
      html.println("<td>" + formatNumber(bValue) + "</td>");
      html.println("<td>" + formatNumber((float)(aValue*Math.pow(xVal,bValue)))+"</td>");
      html.println("</tr>");

    }
    html.println("</table></td>");
    html.println("</tr></table>");

    html.println("<br><p>&nbsp;&nbsp;&nbsp;&nbsp;Foodsets and associated parameters : </p>");
    XMLTag[] foodSets = modelFile.getTag("foodsets").getTags("foodset");
    html.println("<table border=\"1\" cellpadding=\"2\"><tr>");
    html.println("<th>Name</th>");
    html.println("<th>Description</th>");
    html.println("<th>Species & stages included</th>");
    html.println("</tr>");

    for (int i=0; i<foodSets.length; i++) {
      if (foodSets[i].getAttribute("name").startsWith(speciesName+" :")) {
        String setName = foodSets[i].getAttribute("name");
        setName = setName.substring(setName.indexOf(":")+2);
        String setDesc = functionalGroup.getTagWhere("varietyconcentration","name",setName).getValue("desc");
        html.println("<tr>");
        html.println("<td>" + setName + "</td>");
        html.println("<td>" + setDesc + "</td>");
        XMLTag[] foods = foodSets[i].getTags("food");
        if (foods.length>0) {
          html.println("<td><table>");
          for (int j=0; j<foods.length; j++) {
            String foodSpecies = foods[j].getAttribute("species");
            String foodStage = foods[j].getAttribute("stage");
            html.println("<tr><td>"+foodSpecies+" : "+foodStage+"</td>");
            XMLTag[] params = foods[j].getTags("param");
            html.println("<td><table border=\"1\" cellpadding=\"2\">");
            html.println("  <tr>");
            html.println("    <th>Name</th>");
            html.println("    <th>a</th>");
            html.println("    <th>b</th>");
            html.println("    <th>Value</th>");
            html.println("  </tr>");
            for (int k=0; k<params.length; k++) {
              float afValue = Float.parseFloat(params[k].getAttribute("a"));
              float bfValue = Float.parseFloat(params[k].getAttribute("b"));              
              html.println("  <tr>");
              html.println("    <td>"+params[k].getAttribute("name")+"</td>");
              html.println("    <td>"+formatNumber(afValue)+"</td>");
              html.println("    <td>"+formatNumber(bfValue)+"</td>");
              html.println("    <td>"+formatNumber((float)(afValue*Math.pow(xVal,bfValue)))+"</td>");
              html.println("  </tr>");  
            }
            html.println("</table></td>");
          }
          html.println("</table></td>");
        }
        html.println("</tr>");
      }
    }
    html.println("</table></td></tr></table>");
   
    XMLTag[] distributions = modelFile.getTag("initialplankton").getTags("distribution");
    html.println("<ul>");
    for (int i=0; i<distributions.length; i++) {
      if (distributions[i].getAttribute("species").equals(speciesName)) {
        html.print("<li>");
        html.print("Distribute "+distributions[i].getAttribute("species")+" in state: "+distributions[i].getAttribute("stage"));
        html.print(" between "+distributions[i].getAttribute("top")+" and "+distributions[i].getAttribute("bottom")+ " at "+distributions[i].getAttribute("permetre")+" agents/metre. Initialise as follows:-");
        XMLTag[] vars = distributions[i].getTags("var");
        html.println("<table border=\"1\" cellpadding=\"2\"><tr><th>Name</th><th>Desc</th><th>Value</th><th>+Random</th></tr>");
        for (int j=0; j<vars.length; j++) {
          html.println("  <tr><td>"+vars[j].getAttribute("name")+"</td><td>"+vars[j].getAttribute("desc")+"</td><td>"+vars[j].getAttribute("val")+"</td><td>"+vars[j].getAttribute("rnd")+"</td></tr>");
        }
        html.println("</table></li>");
      }
    }
    html.println("</ul>");
        
    XMLTag[] pmRules = modelFile.getTag("particlemanagement").getTags("rule");
    html.print("<ul>");
    for (int i=0; i<pmRules.length; i++) {
      if (pmRules[i].getAttribute("species").equals(speciesName)) {
        String type = pmRules[i].getAttribute("type");
        html.print("<li><strong>"+ type+"</strong> "+speciesName);
        
        if (type.equals("Maintain")) {
          html.print(" that change state in ");
          html.print("function: "+pmRules[i].getAttribute("function")+", rule: "+pmRules[i].getAttribute("rule"));
          html.println("</li>");
        } else {
          html.print(" in state: "+pmRules[i].getAttribute("stage"));
          if (type.equals("Split")) html.print(" when fewer than ");
          else if (type.equals("Merge")) html.print(" when more than ");
          html.print(pmRules[i].getAttribute("value"));
          String scope = pmRules[i].getAttribute("scope");
          if (scope.equals("Layer")) html.println(" per layer (metre)</li>");
          else if (scope.equals("Column")) html.println(" in the column");
        }
      }
    }
    html.println("</ul>");
    
    html.println("<br>");
    html.println("<br>");

  }

  public void generateNewVarOptionsTable(XMLTag varGroup) {
    XMLTag[] vars;
    // create table of all variables in the given group to be logged
    vars = varGroup.getTags("var");
    if (vars.length > 0) {

      // print logged variables table
      html.println("<table border=\"1\">");
      html.println("<th>Name (Description)</th>");
      for (int i = 0; i < vars.length; i++) {
        html.println("<tr>");
        html.println("<td>" + vars[i].getAttribute("name") + "</td>");
        html.println("</tr>");
      }

      html.println("</table>");
    }
  }

  public void generateVarOptionsTable(XMLTag varGroup) {
    XMLTag[] vars;
    boolean log = false;

    // create table of all variables in the given group to be logged
    vars = varGroup.getTags("var");
    if (vars.length > 0) {
      // first check if there are ANY variables to be logged
      for (int i = 0; i < vars.length; i++) {
        if (vars[i].getTag("log") != null) log = log || vars[i].getTag("log").getValue().compareTo("true") == 0;
        else log = log || false;
      }

      if (log) {
        // print logged variables table
        html.println("<table border=\"1\">");
        html.println("<th>Name</th>");
        html.println("<th>Description</th>");
        for (int i = 0; i < vars.length; i++) {
          if (vars[i].getTag("log") != null) log = vars[i].getTag("log").getValue().compareTo("true") == 0;
          else log = false;

          if (log) {
            html.println("<tr>");
            if (vars[i].getTag("name") != null) html.println("<td>" + vars[i].getTag("name").getValue() + "</td>");
            else html.println("<td>N/A</td>");
            if (vars[i].getTag("desc") != null) html.println("<td>" + vars[i].getTag("desc").getValue() + "</td>");
            else html.println("<td>N/A</td>");
            html.println("</tr>");
          }
        }

        html.println("</table>");
      } else {
        html.println("No variables to be logged");
      }
    } else {
      html.println("No variables to be logged");
    }

  }

  public void generateFunction(XMLTag function, XMLTag parent, XMLFile modelFile) {
    XMLTag[] stages;
    // XMLTag[] functions;
    XMLTag[] equations;
    // XMLTag comment = null;
    String varName, varType, name, eq;

    // print stages where this function is called
    stages = function.getTags("calledin");
    if (stages.length > 0) {
      html.println("<p>&nbsp;&nbsp;&nbsp;&nbsp;Stages called in: &nbsp;&nbsp;");
      for (int k = 0; k < stages.length; k++) {
        if (stages[k] != null) html.println(stages[k].getValue());
        if (k < (stages.length - 1)) {
          html.println(", ");
        }
      }
      html.println("</p>");
    }

    // print the equations for this function
    equations = function.getTags("equation");
    html.println("<p>&nbsp;&nbsp;&nbsp;&nbsp;Equations: &nbsp;&nbsp;</p>");
    for (int k = 0; k < equations.length; k++) {
      html.println("<table>");
      html.println("<tr>");
      html.println("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>");
      if (equations[k].getTag("name") != null) name = equations[k].getTag("name").getValue();
      else name = "(No name)";
      html.println("<td><i>(" + (k + 1) + ")&nbsp;" + name + ":</i><br><br>");

      if (equations[k].getTag("eq") != null) eq = equations[k].getTag("eq").getValue();
      else eq = "";
      html.print(evalEquation(eq) + "</td>");
      html.println("<tr><td>&nbsp;</td></tr>");

      html.print("<br>");

      if (mFunctionVars.size() > 0) {
        // generate table of all variables used in the equation
        Iterator i1 = mFunctionVars.iterator();
        html.println("<tr>");
        html.println("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>");
        // mHTMLFile.println("<td WIDTH = \"210\">&nbsp;</td>");
        html.println("<td>");
        html.println("<table border = \"1\">");
        html.println("<th>Variable Name</th>");
        html.println("<th>Variable Type</th>");
        html.println("<th>Description</th>");
        html.println("<th>Default Value</th>");
        html.println("<th>History</th>");
        html.println("<th>Unit</th>");

        while (i1.hasNext()) {
          varName = (String) i1.next();
          XMLTag variableTag = null;
          if (varName.endsWith("$Pool")) {
            String chemName = varName.substring(0,varName.length()-5);
            variableTag = new XMLTag("var");
            variableTag.addTag("name",varName);
            variableTag.addTag("desc",chemName+" pool");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","-3,Mol "+chemName+",1");
            
          } else if (varName.endsWith("$Ingested")) {
            String chemName = varName.substring(0,varName.length()-9);
            variableTag = new XMLTag("var");
            variableTag.addTag("name",varName);
            variableTag.addTag("desc",chemName+" incoming pool");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","-3,Mol "+chemName+", ");
            
          } else if (varName.endsWith("$Conc")) {
            String chemName = varName.substring(0,varName.length()-5);
            variableTag = new XMLTag("var");
            variableTag.addTag("name",varName);
            variableTag.addTag("desc",chemName+" in solution");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","-3,Mol "+chemName+",1,0,m,-3");
          
          } else if (varName.endsWith("z")) {
            variableTag = new XMLTag("var");
            variableTag.addTag("name","z");
            variableTag.addTag("desc","Depth");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","0,m,1");

          } else if (varName.endsWith("N_t")) {
            variableTag = new XMLTag("var");
            variableTag.addTag("name","N_t");
            variableTag.addTag("desc","Total concentration of top predator");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","N/A");

          } else if (varName.endsWith("D_t")) {
            variableTag = new XMLTag("var");
            variableTag.addTag("name","D_t");
            variableTag.addTag("desc","Distribution of top predator. (Sum to 1)");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","N/A");

          } else if (varName.endsWith("S_t")) {
            variableTag = new XMLTag("var");
            variableTag.addTag("name","S_t");
            variableTag.addTag("desc","Size factor of top predator");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","N/A");
          
          } else if (varName.endsWith("TimeStep")) {
            variableTag = new XMLTag("var");
            variableTag.addTag("name","TimeStep");
            variableTag.addTag("desc","Timestep size");
            double tss = Double.parseDouble(modelFile.getTag("track").getValue("secstep"))/3600.0;
            variableTag.addTag("value",String.valueOf(tss));
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","0,h,1");
          
          } else if (varName.endsWith("Visible Irradiance")) {
            variableTag = new XMLTag("var");
            variableTag.addTag("name","Visible Irradiance");
            variableTag.addTag("desc","Visible Irradiance");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","0,W,1,0,m,-2");
          
          } else if (varName.endsWith("Full Irradiance")) {
            variableTag = new XMLTag("var");
            variableTag.addTag("name","Full Irradiance");
            variableTag.addTag("desc","Full Irradiance");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","0,W,1,0,m,-2");
          
          } else if (varName.endsWith("Temperature")) {
            variableTag = new XMLTag("var");
            variableTag.addTag("name","Temperature");
            variableTag.addTag("desc","Temperature");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","0,C,1");
          
          } else if (varName.endsWith("Salinity")) {
            variableTag = new XMLTag("var");
            variableTag.addTag("name","Salinity");
            variableTag.addTag("desc","Salinity");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","0,0,0");
          
          } else if (varName.endsWith("Density")) {
            variableTag = new XMLTag("var");
            variableTag.addTag("name","Density");
            variableTag.addTag("desc","Density");
            variableTag.addTag("value","N/A");
            variableTag.addTag("hist","N/A");
            variableTag.addTag("unit","0,kg,1,0,m,-3");
          
          }
            
          
          if (variableTag == null) variableTag = function.getTagWhere("*", "name", varName);
          if (variableTag == null) variableTag = parent.getTagWhere("*", "name", varName);
          if ((variableTag == null) && (parent.getName().equals("predator")))
            variableTag = modelFile.getTagWhere("functionalgroup","name",parent.getValue("name")).getTagWhere("*","name",varName);
            
         
          if (variableTag == null) {
            // could not find the variable - create empty one and print warning
            variableTag = new XMLTag("N/A");
            variableTag.addTag("name", varName);
            variableTag.addTag("desc", "N/A");
            variableTag.addTag("value", "N/A");
            variableTag.addTag("hist", "N/A");
            variableTag.addTag("unit", "N/A");

            System.out.println("WARNING: could not find variable: " + varName);
          }

          html.println("<tr>");
          html.println("<td>" + varName + "</td>");

          varType = (String) mVariableTypes.get(variableTag.getName());
          if (varType == "variety parameter" || varType == "variety variable" || varType == "variety local") {
            if (variableTag.getAttribute("link") != null) {
              varType += " linked to " + variableTag.getAttribute("link");
            }
          }
          if (varType != null) html.println("<td>" + varType + "</td>");
          else html.println("<td>N/A</td>");
          if (variableTag.getTag("desc") != null) html.println("<td>" + variableTag.getValue("desc") + "</td>");
          else html.println("<td>N/A</td>");
          if (variableTag.getTag("value") != null) html.println("<td>" + formatNumber(variableTag.getValue("value")) + "</td>");
          else html.println("<td>N/A</td>");
          if (variableTag.getTag("hist") != null) html.println("<td>" + variableTag.getValue("hist")+ "</td>");
          else html.println("<td>N/A</td>");
          if (variableTag.getTag("unit") != null) html.println("<td>" + formatUnit(variableTag.getValue("unit")) + "</td>");
          else html.println("<td>N/A</td>");
          html.println("</tr>");
        }
        html.println("</table>");
        html.println("</td>");
        html.println("</tr>");
      }

      html.println("</table>");

      html.println("<br><br>");
    }
  }

  private String cleanName(String s, boolean use_DOL) {
    // formatting version was too unpredictable so just convert bad characters to spaces
    if (s != null) return s.replaceAll("[^a-zA-Z0-9\\-]", " ").replaceAll("  ", " ");
    return missingField;
  }

  
  /**
   * Reads a unit in the format of the model xml file and returns it in a format
   * for printing it in HTML
   * 
   */
  private String formatUnit(String unit) {
    if (unit == "N/A") { return unit; }
    String[] unitInfoList = unit.split(",");
    String result = "";
    for (int i = 0; i < unitInfoList.length; i += 3) {
      if (unitInfoList[i + 2].compareTo("1") == 0) {
        if (unitInfoList[i].compareTo("0") != 0) {
          result += "(" + unitInfoList[i + 1] + " x 10" + "<sup>" + unitInfoList[i] + "</sup>)";
        } else {
          result += unitInfoList[i + 1];
        }
      } else if (unitInfoList[i + 2].compareTo("0") != 0) {

        if (unitInfoList[i].compareTo("0") != 0) {
          result += "(" + unitInfoList[i + 1] + " x 10" + "<sup>" + unitInfoList[i] + "</sup>)<sup>" + unitInfoList[i + 2] + "</sup>";
        } else {
          result += unitInfoList[i + 1] + "<sup>" + unitInfoList[i + 2] + "</sup>";
        }
      }
    }
    if (result.compareTo("") == 0) {
      result = "no unit";
    }
    // remove any surrounding braces
    // if (result.substring(0,1).compareTo("(") == 0 &&
    // result.substring(result.length() - 1, result.length()).compareTo(")") ==
    // 0)
    // {
    // System.out.println(result);
    // result = result.substring(1, result.length() - 1);
    // }

    return result;
  }

  /**
   * Formats number to convert aEb to a x 10<sup>b</sup>
   * 
   */
  private String formatNumber(String number) {
    String lhs = StringTools.LHS(number, StringTools.getUnNested(number, 'E'));
    String rhs = StringTools.RHS(number, StringTools.getUnNested(number, 'E'));
    if (rhs != "") { return lhs + " x 10<sup>" + rhs + "</sup>"; }
    return number;
  }
  
  private String formatNumber(float f) { return formatNumber(String.valueOf(f)); }

  private String evalUnaryTypes(String s) {

    // int offset = 0;// getOffset();

    String[][] evalUnaryTypes = {

    /*
     * in the array, the elements have the following specification: odd numbered
     * lines = latex format following even numbered line = gnuplot format { VEW
     * xml spec operator, // which should be stripped from the output left hand
     * side formatting, // parameter gets inserted here right hand side
     * formatting }
     */

    // FUNCTIONS
        { "\\divide{", "divide(", ")" },

        { "\\deathChance{", "deathChance(", ")" },

        { "\\change{", "changeStage(", ")" },

        { "\\integrate{", "integrate(", ")" },

        // BOOLEANS
        { "\\not{", "!", "" },

        // NUMERICS
        { "\\minus{", "-", "" },

        { "\\abs{", "|", "|" },

        { "\\rnd{", "rnd(", ")" },

        { "\\log{", "ln(", ")" },

        { "\\log10{", "log<sub>10</sub>(", ")" },

        { "\\asin{", "sin<sup>-1</sup>(", ")" },

        { "\\acos{", "cos<sup>-1</sup>(", ")" },

        { "\\atan{", "tan<sup>-1</sup>(", ")" },

        { "\\sin{", "sin(", ")" },

        { "\\cos{", "cos(", ")" },

        { "\\tan{", "tan(", ")" },

        { "\\sqrt{", "sqrt(", ")" },

        // in case of 'and' or 'or' with just one argument
        { "\\and{", "", "" },

        { "\\or{", "", "" },

        { "\\visIrradAt{", "visualIrradianceAt(", ")" },

        { "\\exp{", "e<sup>", "</sup>" },

        // {"\\exp{", "e</td><td align=\"center\"><table><tr><td><table
        // cellpadding=\"0\" cellspacing=\"0\"><tr><td><pre>",
        // "</td></tr></table><table cellpadding=\"0\"
        // cellspacing=\"0\"><tr><td><pre>&nbsp;</td></tr></table></td></tr></table></td><td
        // align=\"center\"><pre> "},

        { "\\varietysum{", "sum ", "" },

        { "\\varietymul{", "prod ", "" },

        { "\\intz{", "\\left( \\int_{z1}^{z2}", " dz \\right)" },

    };
    for (int i = 0; i < evalUnaryTypes.length; i++) {
      if (StringTools.chomp(s, evalUnaryTypes[i][0])) return evalUnaryTypes[i][1] + eval(StringTools.spit(s, evalUnaryTypes[i][0])) + evalUnaryTypes[i][2];
    }

    return "";
  }

  private String eval(String s) {

    String result = "";

    result = evalUnaryTypes(s);
    if (result.length() > 0) { return result; }

    result = evalBinaryTypes(s);
    if (result.length() > 0) { return result; }

    /*
     * result = evalConstantTypes(s); if (result.length() > 0) { return result; }
     */
    result = evalMultiTypes(s);
    if (result.length() > 0) { return result; }

    result = evalOtherTypes(s);
    if (result != null) { // ###
      if (result.length() > 0) { return result; }
    }

    /*
     * result = evalSetFunctionTypes(s); if (result.length() > 0) { return
     * result; } ### !!!
     */
    result = evalTernaryFunctionTypes(s);
    if (result.length() > 0) { return result; }

    return "";
  }

  private String evalEquation(String s) {
    // s = <equation> field from XML file, will return either a Tex
    // version or a Gnuplot version depending on the value of isTex

    // reset the function variables list
    mFunctionVars.clear();

    if (s == null) { return ""; }

    String[][] baseTypes = { { "\\assign{", "", " = ", "" },

    { "\\assigndiff{", "<big>(</big>d/dt<big>)</big>", " = ", "" },

    { "\\ifthen{", "", "  ==>  ", "" },

    { "\\always{", "", "", "" },

    // {"\\change{", "changeStage<big>(</big>", ", ", "<big>)</big>"},

        { "\\pchange{", "changeStageWithProbabilty<big>(</big>", ", ", "<big>)</big>" }, // ###??

        { "\\divide{", "divide<big>(</big>", ", ", "<big>)</big>" },

        // {"\\ingest{", "ingest<big>(</big>", ", ", "<big>)</big>"},

        { "\\remineralise{", "remineralise<big>(</big>", ", ", "<big>)</big>" },

        { "\\uptake{", "uptake<big>(</big>", ", ", "<big>)</big>" }

    };

    for (int i = 0; i < baseTypes.length; i++) {
      if (StringTools.chomp(s, baseTypes[i][0])) {
        s = StringTools.spit(s, baseTypes[i][0]);
        String lhs = StringTools.LHS(s, StringTools.getUnNested(s, ','));
        String rhs = StringTools.RHS(s, StringTools.getUnNested(s, ','));
        return baseTypes[i][1] + eval(lhs) + baseTypes[i][2] + eval(rhs) + baseTypes[i][3];
      }
    }

    if (StringTools.chomp(s, "\\while{")) {
      s = StringTools.spit(s, "\\while{");
      String lhs = StringTools.LHS(s, StringTools.getUnNested(s, ','));
      String rhs = StringTools.RHS(s, StringTools.getUnNested(s, ','));
      String result = "while <big>(</big>" + eval(lhs) + ") <br> do (" + " ";
      String[] assigns = StringTools.nestedSplit(rhs, ',');
      for (int i = 0; i < assigns.length; i++) {
        result += evalEquation(assigns[i]);
        if (i < (assigns.length - 1)) result += ", ";
      }
      return result + "<big>)</big>";
    }

    if (StringTools.chomp(s, "\\ingest{") || StringTools.chomp(s, "\\change{") || StringTools.chomp(s, "\\create{")) { return eval(s); }

    /*
     * if (StringTools.chomp(s, "\\graphvals{")) { s = StringTools.spit(s,
     * "\\graphvals{"); return createGraphVal(s); }
     */

    return "";

  }

  private String evalBinaryTypes(String s) {

    String[][] binaryTypes = {

    // FUNCTIONS
        { "\\absorb{", "absorb<big>(</big>", ", ", "<big>)</big>" },

        { "\\remineralise{", "remineralise<big>(</big>", ", ", "<big>)</big>" },

        { "\\uptake{", "uptake<big>(</big>", ", ", "<big>)</big>" },

        { "\\pchange{", "changeStageWithProbability<big>(</big>", ", ", "<big>)</big>" },

        { "\\assign{", "assign<big>(</big>", ", ", "<big>)</big>" },

        { "\\set{", "setValue<big>(</big>", ", ", "<big>)</big>" },

        // REGULAR TYPES
        { "\\pow{", "<big>(</big>", "<big>)</big><sup>", "</sup>" },

        { "\\div{", "<big>(</big>", " / ", "<big>)</big>" }, 

        { "\\sub{", "<big>(</big>", " - ", "<big>)</big>" },

        { "\\varhist{", "history<big>(</big>", ", ", "<big>)</big>" }, // ### ?

        // BOOLEAN TYPES

        { "\\greater{", "", " > ", "" },

        { "\\greaterequal{", "", " >= ", "" },

        { "\\equal{", "", " = ", "" },

        { "\\lessequal{", "", " <= ", "" },

        { "\\less{", "", " < ", "" },

        { "\\neq{", "", " /= ", "" }, };

    for (int i = 0; i < binaryTypes.length; i++) {
      if (StringTools.chomp(s, binaryTypes[i][0])) {
        String temp = StringTools.spit(s, binaryTypes[i][0]);
        String lhs = StringTools.LHS(temp, StringTools.getUnNested(temp, ','));
        String rhs = StringTools.RHS(temp, StringTools.getUnNested(temp, ','));
        return binaryTypes[i][1] + eval(lhs) + binaryTypes[i][2] + eval(rhs) + binaryTypes[i][3];
      }
    }

    return "";
  }

  private String evalMultiTypes(String s) {

    String[][] multiTypes = { { "\\min{", "min<big>(</big>", " , ", "<big>)</big>" },

    { "\\max{", "max<big>(</big>", " , ", "<big>)</big>" },

    { "\\mul{", "", " x ", "" },

    { "\\add{", "<big>(</big>", " + ", "<big>)</big>" },

    { "\\and{", "<big>(</big>", " /\\ ", "<big>)</big>" },

    { "\\or{", "<big>(</big>", " \\/ ", "<big>)</big>" },

    { "\\conditional{", "conditional<big>(</big>", " , ", "<big>)</big>" },

    { "\\create{", "create<big>(</big>", " , ", "<big>)</big>" },

    };
    for (int i = 0; i < multiTypes.length; i++) {
      if (StringTools.chomp(s, multiTypes[i][0])) {

        s = StringTools.spit(s, multiTypes[i][0]);

        String lhs = StringTools.LHS(s, StringTools.getUnNested(s, ','));
        String rhs = StringTools.RHS(s, StringTools.getUnNested(s, ','));
        String b1 = eval(lhs);
        String res = multiTypes[i][1] + b1;

        while (StringTools.getUnNested(rhs, ',') >= 0) {
          lhs = StringTools.LHS(rhs, StringTools.getUnNested(rhs, ','));
          String b2 = eval(lhs);
          res += multiTypes[i][2] + b2;

          rhs = StringTools.RHS(rhs, StringTools.getUnNested(rhs, ','));
        }

        String b2 = eval(rhs);
        res += multiTypes[i][2] + b2;

        return res + multiTypes[i][3];
      }
    }

    return "";

  }

  private String evalOtherTypes(String s) {

    String varName = null, stageName = null;

    String[][] evalSwitchTypes = { { "\\ifswitch{", "", "" } };
    for (int i = 0; i < evalSwitchTypes.length; i++) {
      if (StringTools.chomp(s, evalSwitchTypes[i][0])) return /*
                                                               * ifSwitchHelper
                                                               * ### !!!
                                                               */(StringTools.spit(s, evalSwitchTypes[i][0]) + evalSwitchTypes[i][1]) + evalSwitchTypes[i][2];
    }

    String[][] evalCleanVarTypes = { { "\\var{", "", "" } };
    for (int i = 0; i < evalCleanVarTypes.length; i++) {
      if (StringTools.chomp(s, evalCleanVarTypes[i][0])) {
        varName = (StringTools.spit(s, evalCleanVarTypes[i][0]) + evalCleanVarTypes[i][1]) + evalCleanVarTypes[i][2];
        if (varName != null && !mFunctionVars.contains(varName)) { // ###
          mFunctionVars.add(varName);
        }
        return "<b>" + varName + "</b>"; // /* cleanVar ### !!!
      
      }
    }

    String[][] evalStageTypes = { { "\\stage{", "", "" } };
    for (int i = 0; i < evalStageTypes.length; i++) {
      if (StringTools.chomp(s, evalStageTypes[i][0])) {
        stageName = (StringTools.spit(s, evalStageTypes[i][0]) + evalStageTypes[i][1]) + evalStageTypes[i][2];
        if (stageName == null) { // ###
          throw new RuntimeException("found null stage name");
        }
        return "<b>" + stageName + "</b>"; // /* cleanVar ### !!!
      
      }
    }

    String[][] valHelperTypes = { { "\\val{", "", "" } };
    for (int i = 0; i < valHelperTypes.length; i++) {
      if (StringTools.chomp(s, valHelperTypes[i][0])) {

     

        return evalSival(StringTools.spit(s, valHelperTypes[i][0]) + valHelperTypes[i][1]) + valHelperTypes[i][2];
      }
    }

    return "";
  }

  private String evalSival(String s) {
    // why ever convert to doubles? we just convert back to strings in the end
    // for texifying anyway. real floats were introducing precision errors.
    s = StringTools.spit(StringTools.LHS(s, StringTools.getUnNested(s, ',')), "\\sival{");

    if (!(s.equals(""))) {
      String vTemp = StringTools.LHS(s, StringTools.getUnNested(s, ','));
      String eTemp = StringTools.RHS(s, StringTools.getUnNested(s, ','));

      if (Double.parseDouble(eTemp) == 0) return vTemp;
      else return vTemp + " x 10<sup>" + eTemp + "</sup>";
    }

    return null;
  }

  

  private String evalTernaryFunctionTypes(String s) {

    String[][] ternaryFunctions = { { "\\updatez{", "updatez<big>(</big>", ", ", ", ", "<big>)</big>" },

    { "\\ingest{", "ingest<big>(</big>", ", ", ", ", "<big>)</big>" }

    };
    for (int i = 0; i < ternaryFunctions.length; i++) {
      if (StringTools.chomp(s, ternaryFunctions[i][0])) {
        // untested
        String temp = StringTools.spit(s, ternaryFunctions[i][0]);
        String left = StringTools.LHS(temp, StringTools.getUnNested(temp, ','));
        String mid = StringTools.RHS(temp, StringTools.getUnNested(temp, ','));
        String right = StringTools.RHS(mid, StringTools.getUnNested(mid, ','));
        return ternaryFunctions[i][1] + eval(left) + ternaryFunctions[i][2] + eval(mid) + ternaryFunctions[i][3] + eval(right) + ternaryFunctions[i][4];
      }
    }

   
    return "";
  }

  /**
   * Draws a bar chart given the value pairs in "\graphvals{}" format
   */
  public void drawBarChart(String s) {
    String lhs = null, rhs = null;
    int x, colwidth, colheight, height;
    double y, ymax = 0;
    double[] vals;
    Color rgb;

    if (StringTools.chomp(s, "\\graphvals{")) {
      s = StringTools.spit(s, "\\graphvals{");
   
      String[] assigns = StringTools.nestedSplit(s, ',');
      vals = new double[assigns.length];
      for (int i = 0; i < assigns.length; i++) {
      
        if (StringTools.chomp(assigns[i], "{")) {
          assigns[i] = StringTools.spit(assigns[i], "{");
          lhs = StringTools.LHS(assigns[i], StringTools.getUnNested(assigns[i], ','));
          rhs = StringTools.RHS(assigns[i], StringTools.getUnNested(assigns[i], ','));

          x = Integer.valueOf(lhs).intValue();
          y = Double.valueOf(rhs).doubleValue();
          vals[x] = y;

          if (y > ymax) {
            ymax = y;
          }
        }

    
      }

      // draw the chart (as a table) in html

      colwidth = 30;
      height = 150;
      html.println("<table border =\"1\" cellpadding=\"0\" cellspacing=\"0\"><tr><td><table cellpadding=\"0\" cellspacing=\"0\"  height = \"" + height
          + "\"><tr>");
      for (int i = 0; i < vals.length; i++) {
        colheight = (int) ((vals[i] * height)/ymax);
        rgb = RGBForWaveLength(wavelengths[i]);
        if (colheight == 0) rgb = Color.white;
        String r = "#".concat(hex[rgb.getRed() / 16]).concat(hex[rgb.getRed() % 16]);
        String g = r.concat(hex[rgb.getGreen() / 16]).concat(hex[rgb.getGreen() % 16]);
        String hexColor = g.concat(hex[rgb.getBlue() / 16]).concat(hex[rgb.getBlue() % 16]);
        html.println("<td valign=\"BOTTOM\"><table bgcolor=\"" + hexColor + "\"  cellpadding=\"0\" cellspacing=\"0\" width=\"" + colwidth
            + "\" height = \"" + colheight + "\"><tr><td>&nbsp;</td></tr></table></td>");
        // mHTMLFile.println("<td></td>");
      }
      html.println("</tr></table></td></tr></table>");

    }
  }

  public static double[] wavelengths = new double[] { 300, 357.5, 387.5, 412.5, 437.5, 462.5, 487.5, 512.5, 537.5, 562.5, 587.5, 612.5, 637.5, 662.5, 687.5,
      712.5, 737.5, 787.5, 900, 1100, 1300, 1500, 1700, 1900, 2100, 2300 };

  public static String[] hex = new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F" };

  public static Color RGBForWaveLength(double w) {
    double r = 0;
    double b = 0;
    double g = 0;
    if ((w >= 380) && (w < 440)) {
      r = (440 - w) / 60;
      g = 0;
      b = 1;
    } else if ((w >= 440) && (w < 490)) {
      r = 0;
      g = (w - 440) / 50;
      b = 1;
    } else if ((w >= 490) && (w < 510)) {
      b = (510 - w) / 20;
      r = 0;
      g = 1;
    } else if ((w >= 510) && (w < 580)) {
      b = 0;
      g = 1;
      r = (w - 510) / 70;
    } else if ((w >= 580) && (w < 645)) {
      r = 1;
      g = (645 - w) / 65;
      b = 0;
    } else if ((w >= 645) && (w < 780)) {
      r = 1;
      g = 0;
      b = 0;
    }
    if (w > 700) r = r * (0.3 + (0.7 * ((780 - w) / 80)));
    if ((w < 420) && (w >= 380)) {
      r = r * (0.3 + (0.7 * (w - 380) / 40));
      b = (0.3 + (0.7 * (w - 380) / 40));
    }
    r = r * 255;
    b = b * 255;
    g = g * 255;
    // if (!PigmentPanel.doPigments.isSelected()) {
    // double avg = (r+b+g)/3;
    // return new Color((int)avg,(int)avg,(int)avg);
    // } else
    return new Color((int) r, (int) g, (int) b);
  }

}
