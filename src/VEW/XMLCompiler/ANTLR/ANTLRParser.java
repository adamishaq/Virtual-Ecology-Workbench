package VEW.XMLCompiler.ANTLR;

import java.io.File;
import java.io.IOException;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.tree.CommonTree;

import VEW.XMLCompiler.ANTLR.BACONLexer;
import VEW.XMLCompiler.ANTLR.BACONParser;
import VEW.XMLCompiler.ANTLR.BACONParser.rules_return;
import VEW.XMLCompiler.ASTNodes.*;

/**
 * A façade infront of an ANTLR compiler that generates ASTree Nodes.
 * 
 * Use for all accesses to the parser and codeGen.
 * 
 * @author Chris Bates
 *
 */
public class ANTLRParser {

	private String filePath;
	private BACONParser g;
	
	/**
	 * Creates a parser to run on a given file.
	 * 
	 * @param file the file to be Parsed.
	 * @throws IOException only thrown if the given file is invalid.
	 */
	public ANTLRParser (File file) throws IOException {
		this.filePath = file.getAbsolutePath();
		
		BACONLexer lex = new BACONLexer(new ANTLRFileStream(file.getAbsolutePath()));
		CommonTokenStream tokens = new CommonTokenStream(lex);
        g = new BACONParser(tokens);
		
	}
	
	/**
	 * Sets up a parser with the given string to parse.
	 * 
	 * @param codeToParse the input string containing the code.
	 */
	public ANTLRParser (String codeToParse) {
		this.filePath = null;
		
		BACONLexer lex = new BACONLexer(new ANTLRStringStream (codeToParse));
		CommonTokenStream tokens = new CommonTokenStream(lex);
        g = new BACONParser(tokens);
	}
	
	
	/**
	 * Parses and semantically checks the given input and then generates the XML.
	 * 
	 * @return the XML given by the given Input
	 * @throws RecognitionException thrown if the parser fails to parse the file.
	 * @throws TreeWalkerException thrown if the ASTree nodes are generated incorrectly.
	 * @throws SemanticCheckException 
	 */
	public String generateXML () throws RecognitionException, TreeWalkerException, SemanticCheckException {
		ASTree t = getAST();
		//t.check();
		return t.generateXML();
	}
	
	
	
	/**
	 * Parses the given file and returns the root of the AST generated by the full BACON parser.
	 *  
	 * @return the root of an VEW.XML.Compiler.ANTLR AST
	 * @throws RecognitionException thrown if the parser fails to parse the file.
	 * @throws TreeWalkerException only occurs if the parser has let the incorrect input through
	 */
	public ASTree getAST () throws RecognitionException, TreeWalkerException {		
		return new CommonTreeWalker(getAntlrAST()).constructASTree();
	}
	
	/**
	 * Parses the given file and returns the Object Tree that the tree returns.
	 * 
	 * @return
	 */
	protected CommonTree getAntlrAST () throws RecognitionException {
		
		return (CommonTree) runParserFromEntryPoint ().getTree();
	}
	
	public String getFilePath () {
		return this.filePath;
	}
	
	/*
	 * Assumes rules is the entry point for the parser and returns the rules_return
	 */
	private rules_return runParserFromEntryPoint () throws RecognitionException {
		return g.rules();
	}
	
}
