package VEW.XMLCompiler.ANTLR;

import java.io.IOException;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.tree.CommonTree;

import VEW.XMLCompiler.ANTLR.output.BACONLexer;
import VEW.XMLCompiler.ANTLR.output.BACONParser;
import VEW.XMLCompiler.ANTLR.output.BACONParser.rules_return;

public class ANTLRParser {

	private String filePath;
	private BACONParser g;
	
	public ANTLRParser (String filePath) throws IOException {
		this.filePath = filePath;
		
		BACONLexer lex = null;
		lex = new BACONLexer(new ANTLRFileStream(filePath));
		CommonTokenStream tokens = new CommonTokenStream(lex);
		
        g = new BACONParser(tokens);
		
	}
	
	/**
	 * Parses the given file and returns the root of the AST generated by the full BACON parser.
	 *  
	 * @return the root of an VEW.XML.Compiler.ANTLR AST
	 * @throws RecognitionException thrown if the parser fails to parse the file.
	 */
	public ASTree getAST () throws RecognitionException {
		CommonTree t = getAntlrAST();
		
		return null;
	}
	
	/**
	 * Parses the given file and returns the Object Tree that the tree returns.
	 * 
	 * @return
	 */
	public CommonTree getAntlrAST () throws RecognitionException {
		
		return (CommonTree) runParserFromEntryPoint ().getTree();
	}
	
	public String getFilePath () {
		return this.filePath;
	}
	
	/*
	 * Assumes rules is the entry point for the parser and returns the rules_return
	 */
	private rules_return runParserFromEntryPoint () throws RecognitionException {
		return g.rules();
	}
	
}
