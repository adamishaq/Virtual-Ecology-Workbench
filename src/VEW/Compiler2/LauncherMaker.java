package VEW.Compiler2;

import java.io.PrintWriter;

import VEW.Common.StringTools;
import VEW.Common.XML.XMLTag;


public class LauncherMaker {
  public static void writeLauncherJava(String fileName, XMLTag model) {
    try {
      PrintWriter PW = StringTools.OpenOutputFile(fileName);
      PW.println("package VEW.Sim;");
      PW.println("");
      PW.println("import java.util.Date;");
      PW.println("");
      PW.println("public class Launcher {");
      PW.println("");
      PW.println("  private static boolean LaunchLive = false;");
      PW.println("  public static String JarPath = \".\";");
      PW.println("  public static long startTime;");
      PW.println("");
      PW.println("  public static void main(String[] args) throws Exception {");
      PW.println("    startTime = System.currentTimeMillis();");
      PW.println("    Kernel.P = null;");
      PW.println("    HandleArguments(args);");
      PW.println("    Runtime.getRuntime().addShutdownHook(new EndThings());");
      PW.println("    if(LaunchLive) {");
      PW.println("      LiveSim.Launch();");
      PW.println("    } else {");
      PW.println("      Sim.Launch();");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      PW.println("  private static void HandleArguments(String[] args) {");
      PW.println("    boolean snapReadForced = false;");
      PW.println("    boolean snapWriteForced = false;");
      PW.println("    for(int i=0; i<args.length; i++) {");
      PW.println("      Kernel.println(args[i]);");
      PW.println("      if(args[i].toUpperCase().startsWith(\"/AUDIT:\")) {");
      PW.println("        Kernel.println(\"Using audit file : \"+args[i].substring(7));");
      PW.println("        Logging.setAuditFile(args[i].substring(7));");
      PW.println("      }");
      PW.println("      else if(args[i].toUpperCase().startsWith(\"/SETPATH:\")) {");
      PW.println("        String setpath = args[i].substring(9);");
      PW.println("        JarPath = setpath;");
      PW.println("      }");
      PW.println("      else if(args[i].toUpperCase().startsWith(\"/SEED:\")) {");
      PW.println("        try {");
      PW.println("          int seed = Integer.parseInt(args[i].substring(6));");
      PW.println("          SysVars._seed=seed;");
      PW.println("          SysVars._seedForced=true;");
      PW.println("        } catch (Exception e) {}");
      PW.println("      }");
      PW.println("");
      PW.println("      else if(args[i].toUpperCase().startsWith(\"/MAKESNAP:\")) {");
      PW.println("        String s = args[i].substring(10);");
      PW.println("        if (s.indexOf(\",\")<=0) s=s+\",\"+args[i].substring(10);");
      PW.println("        Logging.setSnap(Long.parseLong(s.substring(0,s.indexOf(\",\"))),Long.parseLong(s.substring(s.indexOf(\",\")+1)));");
      PW.println("        snapWriteForced = true;");
      PW.println("      }");
      PW.println("      else if (args[i].toUpperCase().startsWith(\"/NEWSEED\")) {");
      PW.println("        // Recognised only with usesnap");
      PW.println("");
      PW.println("      } else if (args[i].toUpperCase().startsWith(\"/SKIPBOUNDARY:\")) {");
      PW.println("        // Again, recognised only with usesnap");
      PW.println("      }");
      PW.println("");
      PW.println("");
      PW.println("      else if(args[i].toUpperCase().startsWith(\"/USESNAP:\")) {");
      PW.println("        String s = args[i].substring(9);");
      PW.println("        int _j=s.length()-1;");
      PW.println("        while (s.charAt(_j)!='.') _j--;");
      PW.println("        SysVars._firstExecTime=Long.parseLong(s.substring(_j+1));");      
      PW.println("        boolean newseed=false;");
      PW.println("        for (int j=0; j<args.length; j++) {");
      PW.println("          if (args[j].equals(\"/NEWSEED\")) {");
      PW.println("            newseed=true;");
      PW.println("            j=args.length;");
      PW.println("          }");
      PW.println("        }");
      PW.println("        Logging.setSnap(s,newseed);");
      PW.println("        snapReadForced = true;");
      PW.println("        for (int j=0; j<args.length; j++) {");
      PW.println("          if (args[j].equals(\"/SKIPBOUNDARY:\")) {");
      PW.println("            char ch = args[i].charAt(14);");
      PW.println("            if ((ch=='y') || (ch=='Y')) {");
      PW.println("              SysVars._skipBoundary=true;");
      PW.println("              System.out.println(\"Skipping boundary data before restart\");");
      PW.println("              SysVars._firstExecTime=Long.parseLong(s.substring(_j+1));");
      PW.println("            }");
      PW.println("            else {");
      PW.println("              j=args.length;");
      PW.println("              SysVars._firstExecTime=SysVars.startTime;");
      PW.println("            }");
      PW.println("          }");
      PW.println("        }");
      PW.println("        System.out.println(\"Checkpoint forced to \"+SysVars._firstExecTime);");
      PW.println("      }");
      PW.println("");
      PW.println("      else if(args[i].toUpperCase().startsWith(\"/LIVE\")) LaunchLive = true;");
      PW.println("      else if(args[i].toUpperCase().startsWith(\"/OUTPUTPATH:\")) {");
      PW.println("        String s = args[i].substring(12);");
      PW.println("        Kernel.println(\"Saving output to '\" + s + \"'.\");");
      PW.println("        try {");
      PW.println("          Kernel.P = new java.io.PrintWriter(new java.io.FileOutputStream(s));");
      PW.println("        } catch (Exception e) { e.printStackTrace(); }");
      PW.println("      }");
      PW.println("      else");
      PW.println("      {");
      PW.println("        System.err.println(\"Invalid command line argument: \" + args[i]);");
      PW.println("        System.err.println(\"Correct usage:\");");
      PW.println("        System.err.println(\"/audit:[filename]        - use the specified file for particle logging.\");");
      PW.println("        System.err.println(\"/debug                   - cause the simulation to output more debug information.\");");
      PW.println("        System.err.println(\"/live                    - run the simulation in interactive mode.\");");
      PW.println("        System.err.println(\"/makesnap:[start],[freq] - create simulation status snapshots starting at specified timestep and repeating at specified frequency.\");");
      PW.println("        System.err.println(\"/newseed                 - Specify to use new random seed after loading a snapshot.\");");
      PW.println("        System.err.println(\"/outputpath:[file]       - log all output text to the specified file (Warning! will overwrite file).\");");
      PW.println("        System.err.println(\"/seed:[seed#]            - use the specified number as the initialiser for a random seed.\");");
      PW.println("        System.err.println(\"/setpath:[path]          - set running directory (path of JAR file)\");");
      PW.println("        System.err.println(\"/skipboundary:[y|n]      - skip earlier boundary data when loading from a restart\");");
      PW.println("        System.err.println(\"/usesnap:[snapshot]      - launch the simulation starting from the snapshot specified.\");");
      PW.println("        System.exit(0);");
      PW.println("      }");
      PW.println("    }");
      PW.println("    SysVars.initCheckpoints(snapReadForced, snapWriteForced);");
      PW.println("    Kernel.println(\"Arguments handled\");");
      PW.println("    Kernel.println(\"Using Random Seed #\" + SysVars._seed);");
      PW.println("    Utils.setSeed(SysVars._seed);");
      PW.println("");
      PW.println("  }");
      PW.println("");
      PW.println("  static class EndThings extends Thread {");
      PW.println("    public void run() {");
      PW.println("      try {");
      PW.println("        Logging.close();");
      PW.println("      } catch(Exception e) { e.printStackTrace(); }");
      PW.println("");
      PW.println("      System.gc();");
      PW.println("      Kernel.println(\"Ending Sim\");");
      PW.println("      Kernel.println(\"Free Memory  = \"+Runtime.getRuntime().freeMemory());");
      PW.println("      if (Kernel.P!=null) Kernel.P.close();");
      PW.println("      System.out.println(\"Sim finished at \" + new Date());");
      PW.println("      System.out.println(\"Execution took \" + ((System.currentTimeMillis() - startTime)/1000.0) + \" seconds\");");
      PW.println("    }");
      PW.println("  }");
      PW.println("}");
      PW.flush();
      PW.close();
    } catch (Exception e) { e.printStackTrace(); }

  }

}

