package VEW.Compiler2;

import java.io.PrintWriter;
import java.util.ArrayList;

import VEW.Common.StringTools;
import VEW.Common.XML.XMLTag;
import VEW.Controller2.OutputDialog2;
import VEW.Controller2.VEWController2;

public class WColCompiler {
  
  public static void insertChemicalIngestionVars(PrintWriter PW, XMLTag model, String declaration) {
    XMLTag[] vars = model.getTag("output/col").getTagsWhere("var","@chemtype",OutputDialog2.DEF_ING_FROM);
    ArrayList rememberEntries = new ArrayList();
    for (int i=0; i<vars.length; i++) {
      boolean found=false;
      int j=0;
      
      while ((!found) && (j<rememberEntries.size())) {
        String chem = rememberEntries.get(j++).toString();
        String specFcomp = rememberEntries.get(j++).toString();
        String stageFcomp= rememberEntries.get(j++).toString();
        String tryAll = rememberEntries.get(j++).toString();
        String specBcomp = rememberEntries.get(j++).toString();
        String stageBcomp= rememberEntries.get(j++).toString();
        if ((chem.equals(vars[i].getAttribute("chem"))) &&
            (specFcomp.equals(vars[i].getAttribute("fromspecies"))) &&
            (stageFcomp.equals(vars[i].getAttribute("fromstage"))) &&
            (tryAll.equals(vars[i].getAttribute("byall"))) &&
            (specBcomp.equals(vars[i].getAttribute("byspecies"))) &&
            (stageBcomp.equals(vars[i].getAttribute("bystage")))) found=true;
      }
      
      if (!found) {
      
        if ((vars[i].getAttribute("byall")!=null) && (vars[i].getAttribute("byall").equals("true"))) {
          PW.print(declaration+"_"+vars[i].getAttribute("chem")+"_from_");
          PW.print(StringTools.nonSpace(vars[i].getAttribute("fromspecies"))+"_");
          PW.println(StringTools.nonSpace(vars[i].getAttribute("fromstage"))+"_by_all = 0.0;");
          rememberEntries.add(vars[i].getAttribute("chem"));
          rememberEntries.add(vars[i].getAttribute("fromspecies"));
          rememberEntries.add(vars[i].getAttribute("fromstage"));
          rememberEntries.add("all");
          rememberEntries.add(" ");
          rememberEntries.add(" ");
          
        
        } else {
          PW.print(declaration+" _"+vars[i].getAttribute("chem")+"_from_");
          PW.print(StringTools.nonSpace(vars[i].getAttribute("fromspecies"))+"_");
          PW.print(StringTools.nonSpace(vars[i].getAttribute("fromstage"))+"_by_");
          PW.print(StringTools.nonSpace(vars[i].getAttribute("byspecies"))+"_");
          PW.println(StringTools.nonSpace(vars[i].getAttribute("bystage"))+" = 0.0;");
          rememberEntries.add(vars[i].getAttribute("chem"));
          rememberEntries.add(vars[i].getAttribute("fromspecies"));
          rememberEntries.add(vars[i].getAttribute("fromstage"));
          rememberEntries.add("!");
          rememberEntries.add(vars[i].getAttribute("byspecies"));
          rememberEntries.add(vars[i].getAttribute("bystage"));

        }
      }
    }
    rememberEntries.clear();
  }
  
  public static void writeWColJava(String fileName, XMLTag model) {
    final boolean AdvWanted = false; // Menu option later!
    final boolean upwellingWanted = false; // ditto
    try {
      PrintWriter PW = StringTools.OpenOutputFile(fileName);
      PW.println("package VEW.Sim;");
      PW.println("");
      PW.println("import java.util.ArrayList;");
      PW.println("import java.util.GregorianCalendar;");
      PW.println("import java.lang.Math;");
      PW.println("import VEW.Common.*;");
      PW.println("import VEW.Sim.FunctionalGroup;");
      PW.println("import VEW.Sim.Kernel;");
      PW.println("import VEW.Sim.SysVars;");
      PW.println("");
      PW.println("import java.io.*;");
      PW.println("");
      PW.println("");
      PW.println("public class WaterCol {");
      PW.println("");
      PW.println("  public int snapShotError = 0;");
      PW.println("");
      PW.println("  public BLayer B_Layer[];");
      PW.println("  public BLayer mixedLayer;");
      PW.println("  public ArrayList P_LayerList, P_LayerRefList;");
      PW.println("  public double Longitude = 0;");
      PW.println("  public double Latitude = 0;");
      PW.println("  private static final GregorianCalendar pmCal1 = new GregorianCalendar();");
      PW.println("  private static final GregorianCalendar pmCal2 = new GregorianCalendar();");
      PW.println("  private static final GregorianCalendar pmCal3 = new GregorianCalendar();");
      PW.println("");
      PW.println("  public int ID;");
      PW.println("");
      PW.println("  public int Nitro_Inj = 1;");
      PW.println("  public int NInj_Count = 0;");
      PW.println("  public int YDay = 0;");
      PW.println("");
      PW.println("  public double MLDepth = 0.0;");
      PW.println("  public double MLDepth_old = 0.0;");
      PW.println("  public double Max_MLD = 0.0;");
      PW.println("  public double Min_MLD = 9999.0;");
      PW.println("  public double UStarCube = 0.0;");
      PW.println("  public double Ekman = 0.0;");
      PW.println("  public double deepestTurboclineEver = 0.0;");
      PW.println("  public double deepestTurboclineThisYear = 0.0;");
      PW.println("");
      PW.println("  private final static double Cp = 3940;");
      PW.println("  private final static double C1 = 0.072169;");
      PW.println("  private final static double C2 = 0.049762;");
      PW.println("  private final static double C3 = 0.80560;");
      PW.println("  private final static double C4 = -0.0075911;");
      PW.println("  private final static double C5 = -0.0030063;");
      PW.println("  private final static double C6 = 0.000035187;");
      PW.println("  private final static double C7 = 0.000037297;");
      if (AdvWanted) {
        PW.println("  private final static double Adv_C4 = -0.0151822;");
        PW.println("  private final static double Adv_C7 = 0.000074594;");
      }
      PW.println("  private final static double g = 9.81;");
      PW.println("  private final static double Pi = 3.141593;");
      PW.println("");
      PW.println("");
      PW.println("  private static double Mix_Eff = 0.5;");
      PW.println("  private static double CP_Eff = 0.1;");
      PW.println("  private static double EF_Depth = 100;");
      PW.println("  private static boolean gettingDeeper = false;");
      PW.println("  private static double bounceDepth = 500;");
      PW.println("  private static double oldBounceDepth = 500;");
      PW.println("  public static boolean offSeason = false;");
      PW.println("  private static boolean oddTimeStep = true;");
      PW.println("");
      PW.println("  /* The environmental details */");
      PW.println("");
      PW.println("  public double SunLight  = 0.0; // Irradiance");
      PW.println("  public double Cooling   = 0.0; // Heat Loss");
      PW.println("  public double WSpeed    = 0.0;");
      PW.println("  public double Z_Height  = 0.0;");
      PW.println("  public double Adv_Depth = 0.0;");
      PW.println("  public double Adv_Temp  = 0.0;");
      PW.println("  public double Adv_EFold = 0.0;");
      PW.println("  public double Rel_Humidity = 0.0;");
      PW.println("  public double Air_Temp = 0.0;");
      PW.println("  public double Cloud_Cover = 0.0;");
      PW.println("");
      PW.println("  private double Salfa = 0;");
      PW.println("  private double ZStar = 0;");
      PW.println("  private double Alpha = 0;");
      PW.println("  private double MixTemp = 0;");
      PW.println("  private double ZStar_M = 0;");
      PW.println("  private double BStar = 0;");
      PW.println("  private double Penerg = 0;");
      PW.println("  private double SIGM = 0;");
      PW.println("");
      final int speciesCount = model.getTag("species").getTags("species").length;
      PW.println("  public ArrayList[][] agents = new ArrayList["+speciesCount+"][]; // The particles within this layer. [Species ID][Stage]");
      PW.println("  private ArrayList[][] agentQueue = new ArrayList["+speciesCount+"][]; // Agents to add at end of timestep. [Species ID][Stage]");
      PW.println("  private ArrayList[][] removeQueue = new ArrayList["+speciesCount+"][]; // Agents to remove at end of timestep. [Species ID][Stage]");
      PW.println("  private ArrayList[][] changeQueue = new ArrayList["+speciesCount+"][]; // Agents to change state at end of timestep. [Species ID][Stage]");      
      PW.println("  public double[][] SpeciesTotal = new double["+speciesCount+"][]; // [Species ID][Stage]");
      PW.println("  public int[][] AgentCounts = new int["+speciesCount+"][]; // [Species ID][Stage]");
      PW.println("  public double[][][] SpeciesStateDemographyCol = new double["+speciesCount+"][][]; // [species][stage][state change reason]");
      PW.println("");
      final int chemCount = model.getTags("chemical").length;
      PW.println("  public double[] solution_chem = new double["+chemCount+"]; // Solution Chemical");
      PW.println("  public double[][][] particulate_chem_ss = new double["+chemCount+"]["+speciesCount+"][]; // Particulate stage by stage");
      PW.println("  public double[] particulate_chem = new double["+chemCount+"]; // Total Particulate");
      PW.println("  public double[] total_chem = new double["+chemCount+"];");
      PW.println("");
      PW.println("  public int[][] lostParticles;");
      PW.println("");
      insertChemicalIngestionVars(PW, model, "  public double ");
      PW.println("");
      PW.println("  public void resetIngestionVars() {");
      insertChemicalIngestionVars(PW,model,"    ");
      PW.println("  }");
      PW.println("");

      PW.println("  public boolean addAgent(FunctionalGroup P) {");
      PW.println("    int zz = (int) Math.floor(P.z[1]);");
      PW.println("    if ((zz>=0) && (zz<SysVars._layers)) {");
      PW.println("      P.blayer=B_Layer[zz];");      
      PW.println("      agents[P.getParams()._type][P._CurrentStage].add(P);");
      PW.println("      P.blayer.AgentCounts[P.getParams()._type][P._CurrentStage]++;");
      PW.println("      AgentCounts[P.getParams()._type][P._CurrentStage]++;");
      PW.println("      return true;");
      PW.println("    } else return false;");
      PW.println("  }");
      PW.println("");
      PW.println("  public boolean addQueuedAgent(FunctionalGroup P) {");
      PW.println("    int zz = (int) Math.floor(P.z[1]);");
      PW.println("    if ((zz>=0) && (zz<SysVars._layers)) {");
      PW.println("      agentQueue[P.getParams()._type][P._CurrentStage].add(P);");
      PW.println("      return true;");
      PW.println("    } else return false;");
      PW.println("  }");
      PW.println("");
      PW.println("  public void queueRemoveAgent(FunctionalGroup P) {");
      PW.println("    removeQueue[P.getParams()._type][P._CurrentStage].add(P);");
      PW.println("  }");
      PW.println("");
      PW.println("  public void removeAgent(FunctionalGroup P, boolean free) {");
      PW.println("    final int spec = P.getParams()._type;");
      PW.println("    for (int i=0; i<agents[spec][P._CurrentStage].size(); i++) {");
      PW.println("      final FunctionalGroup fg = (FunctionalGroup)(agents[spec][P._CurrentStage].get(i));");
      PW.println("      if (fg==P) {");
      PW.println("        agents[spec][P._CurrentStage].remove(i);");
      PW.println("        i=agents[spec][P._CurrentStage].size();");
      PW.println("        P.blayer.AgentCounts[spec][P._CurrentStage]--;");
      PW.println("        AgentCounts[spec][P._CurrentStage]--;");
      PW.println("        if (free) P.freeParticle();");
      PW.println("      }");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      PW.println("  public void queueChangeAgent(FunctionalGroup P) {");
      PW.println("    changeQueue[P.getParams()._type][P._CurrentStage].add(P);");
      PW.println("  }");
      PW.println("");
      PW.println("  public void changeQueuedAgents() {");
      PW.println("    for (int i=0; i<"+speciesCount+"; i++) {");
      PW.println("      for (int j=0; j<changeQueue[i].length; j++) {");
      PW.println("        for (int k=0; k<changeQueue[i][j].size(); k++) {");
      PW.println("          final FunctionalGroup P = (FunctionalGroup) changeQueue[i][j].get(k);");
      PW.println("          final int _nextStage = P._CurrentStage;");
      PW.println("          P._CurrentStage=j;");
      PW.println("          removeAgent(P,false);");
      PW.println("          P._CurrentStage=_nextStage;");
      PW.println("          addAgent(P);");
      PW.println("        }");
      PW.println("        changeQueue[i][j].clear();");
      PW.println("      }");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      PW.println("  public void addQueuedAgents() {");
      PW.println("    for (int i=0; i<"+speciesCount+"; i++) {");
      PW.println("      for (int j=0; j<agentQueue[i].length; j++) {");
      PW.println("        final int noAgents = agentQueue[i][j].size();");
      PW.println("        for (int k=0; k<noAgents; k++) {");
      PW.println("          addAgent((FunctionalGroup)agentQueue[i][j].get(k));");
      PW.println("        }");
      PW.println("        agentQueue[i][j].clear();");
      PW.println("      }");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      
      PW.println("  public void removeQueuedAgents() {");
      PW.println("    for (int i=0; i<"+speciesCount+"; i++) {");
      PW.println("      for (int j=0; j<removeQueue[i].length; j++) {");
      PW.println("        final int agentCount = removeQueue[i][j].size();");
      PW.println("        for (int k=0; k<agentCount-1; k++) {");
      PW.println("          double max=((FunctionalGroup)removeQueue[i][j].get(k)).index;");
      PW.println("          int index=k;");
      PW.println("          for (int l=k+1; l<agentCount; l++) {");
      PW.println("            final int compare = ((FunctionalGroup)removeQueue[i][j].get(l)).index;");
      PW.println("            if (compare>max) {");
      PW.println("              max=compare;");
      PW.println("              index=l;");
      PW.println("            }");
      PW.println("          }");
      PW.println("          if (index!=k) {");
      PW.println("            final FunctionalGroup swap1 = (FunctionalGroup)(removeQueue[i][j].get(index));");
      PW.println("            final FunctionalGroup swap2 = (FunctionalGroup)(removeQueue[i][j].get(k));");
      PW.println("            removeQueue[i][j].set(k,swap1);");
      PW.println("            removeQueue[i][j].set(index,swap2);");
      PW.println("          }");
      PW.println("        }");
      PW.println("        int k=0;");
      PW.println("        while (k<removeQueue[i][j].size()-1) {");
      PW.println("          final FunctionalGroup fg1 = (FunctionalGroup)(removeQueue[i][j].get(k));");
      PW.println("          final FunctionalGroup fg2 = (FunctionalGroup)(removeQueue[i][j].get(k+1));");
      PW.println("          if (fg1.index==fg2.index) removeQueue[i][j].remove(k+1);");
      PW.println("          else k++;");
      PW.println("        }");
      PW.println("        for (k=0; k<agentCount; k++) {");
      PW.println("          final FunctionalGroup fg = (FunctionalGroup)removeQueue[i][j].get(k);");
      PW.println("          fg.blayer.AgentCounts[i][j]--;");
      PW.println("          AgentCounts[i][j]--;");
      PW.println("          agents[i][j].remove(fg.index);");
      PW.println("          fg.freeParticle();");
      PW.println("        }");
      PW.println("        removeQueue[i][j].clear();");
      PW.println("      }");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      PW.println("  public void updatePhysics() {");
      PW.println("    MLDepth_old = MLDepth;");
      PW.println("");
      PW.println("    double UStar;");
      PW.println("");
      PW.println("    UStar=0.001651/(((PLayer)P_LayerList.get(0)).Density + 1000);");
      PW.println("    UStar=Math.pow(UStar,1.5);");
      PW.println("    UStarCube = UStar * Math.pow(WSpeed,3);");
      PW.println("    SIGM = (((PLayer) P_LayerList.get(0)).Density + 1000.0);");
      PW.println("    final double MLS = ((PLayer) P_LayerList.get(0)).Salinity;");
      PW.println("    Alpha = (-(C2 + (2.0 * C4 * MixTemp) + (C5 * MLS) + (C6 * MixTemp * MixTemp) + (2.0 * C7 * MLS * MixTemp)) / SIGM);");
      PW.println("    BStar = ((Alpha * Cooling * SysVars.stepInSeconds) / Cp);");
      //PW.println("    SH_Flux.setNow(((SunLight - Cooling) * ((Alpha * SysVars.stepInSeconds) / Cp)));");
      PW.println("    PB_LFlux();");
      PW.println("    Convection();");
      PW.println("    Mixing();");
      PW.println("");
      PW.println("    MLDepth=ZStar_M;");
      PW.println("    Order();");
      if (AdvWanted) PW.println("    Advection();");
      PW.println("");
      PW.println("");
      PW.println("    if (MLDepth<Min_MLD) Min_MLD=MLDepth;");
      PW.println("    if (MLDepth>Max_MLD) Max_MLD=MLDepth;");
      PW.println("    if (MLDepth>deepestTurboclineEver) deepestTurboclineEver=MLDepth;");
      PW.println("    if (MLDepth>deepestTurboclineThisYear) deepestTurboclineThisYear=MLDepth;");
      PW.println("");
      PW.println("    if (MLDepth>MLDepth_old) gettingDeeper = true;");
      PW.println("    if ((MLDepth<MLDepth_old) && (gettingDeeper)) {");
      PW.println("      gettingDeeper = false;");
      PW.println("      bounceDepth=MLDepth_old; // Stores the bottom of the 'bouncing' MLDepth.");
      PW.println("      if (bounceDepth>oldBounceDepth) offSeason=false;");
      PW.println("      else offSeason=true; // offSeason is true if the daily max MLD is getting shallower.");
      PW.println("      oldBounceDepth = bounceDepth;");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      PW.println("  public double getHeatContent() {");
      PW.println("    PLayer LTop = (PLayer) P_LayerList.get(0);");
      PW.println("    PLayer LNext;");
      PW.println("    int i=0;");
      PW.println("    final int lastLayer = P_LayerList.size()-1; // shc at 20 deg = 4181.3 J kg-1 K-1.");
      PW.println("    final double shcMultiplier = 4181.3/4.0; // the 4.0 is to average temp and density.");
      PW.println("    double hc = 0;                           // Temp converted to K (+273.15 twice)");
      PW.println("    while (i<=lastLayer) {                   // Density: \"26\" = 1026 kg m-3 - hence +2000.");
      PW.println("      LNext = (PLayer) P_LayerList.get(i++);");
      PW.println("      hc += (((LTop.Temp+LNext.Temp+546.3)*");
      PW.println("              (LTop.Density+LNext.Density+2000)*");
      PW.println("              (LNext.Depth-LTop.Depth))*shcMultiplier); // And for 1x1m col, depth*1*1=vol, m3");
      PW.println("      LTop=LNext;");
      PW.println("    }");
      PW.println("    return hc;");
      PW.println("  }");
      PW.println("");
      PW.println("  public void PB_LFlux() {");
      PW.println("");
      PW.println("    double[] gg = new double[] {2.12,2.3,2.71,3.42,3.97,4.21,3.94,3.78,3.78,3.68,3.63,3.52,3.42,3.31,3.15,2.97,2.41,10.17,10.51,6.73,2.52,4.42,1.68,2.10,1.58};");
      PW.println("    double[] hh = new double[] {0.06,0.045,0.043,0.033,0.019,0.018,0.036,0.041,0.069,0.091,0.186,0.228,0.228,0.367,0.5,1.24,2.4,2.05,20,60,400,500,700,2000,3000};");
      PW.println("    double SS, T, Sigma, dx, ODepth, v, DeltaD;");
      PW.println("    double arg = 0;");
      PW.println("    double DChange = 0;");
      PW.println("    double[] specbd = new double[25];");
      PW.println("    int nxrad = 0;");
      PW.println("    PLayer current, previous;");
      PW.println("    double radi = SunLight;");
      PW.println("    oddTimeStep = ! oddTimeStep;");
      PW.println("    if (radi> 0.0) {");
      PW.println("      current = (PLayer) P_LayerList.get(0);");
      PW.println("");
      PW.println("      current.Full_Irrad=0;");
      PW.println("      current.Vis_Irrad=0;");
      PW.println("      for (int i=0; i<25; i++) current.irrad[i]=0;");
      PW.println("      radi *= 0.0104134;");
      PW.println("      v = 1 / (Math.cos(Math.asin(0.75 * Math.sin(Z_Height))));");
      PW.println("      for (int i=0; i<25; i++) {");
      PW.println("        specbd[i] = radi * gg[i];");
      PW.println("        current.Full_Irrad += specbd[i];");
      PW.println("        current.irrad[i] += specbd[i];");
      PW.println("        if ((i>=2)&&(i<15)) current.Vis_Irrad += specbd[i];");
      PW.println("      }");
      PW.println("");
      PW.println("      ODepth = current.Depth;");
      PW.println("");
      PW.println("      for (int i=1; i<P_LayerList.size(); i++) {");
      PW.println("        current = (PLayer) P_LayerList.get(i);");
      PW.println("        for (int j=0; j<25; j++) current.irrad[j]=0;");
      PW.println("        current.Full_Irrad = 0;");
      PW.println("        current.Vis_Irrad = 0;");
      PW.println("        BLayer currentBLayer = Utils.findBLayer(current.Depth);");
      PW.println("        if (nxrad == 0) {");
      PW.println("          dx = (ODepth - current.Depth) * v;");
      PW.println("");
      PW.println("          for (int j=0; j<25; j++) {");
      PW.println("            arg = dx*hh[j];");
      PW.println("");
      XMLTag[] chems = model.getTags("chemical");
      for (int i=0; i<chems.length; i++) {
        if (chems[i].getValue("pigment").equals("true")) {
          final String chem = StringTools.nonSpace(chems[i].getValue("name"));
          PW.println("            arg += dx * (("+chem+".chi(j) * Math.pow(currentBLayer.particulate_chem["+i+"], "+chem+".e(j))));");
        }
      }
      PW.println("            if (arg<-10) { specbd[j]=0; } else { specbd[j] *= Math.exp(arg); }");
      PW.println("            current.Full_Irrad += specbd[j];");
      PW.println("            current.irrad[j]+=specbd[j];");
      PW.println("            if ((j>=2)&&(j<15)) current.Vis_Irrad += specbd[j];");
      PW.println("          }");
      PW.println("");
      PW.println("          if (current.Full_Irrad < 0.01) {");
      PW.println("            current.Full_Irrad = 0;");
      PW.println("            current.Vis_Irrad = 0;");
      PW.println("            for (int j=0; j<25; j++) current.irrad[j]=0;");
      PW.println("            nxrad = 1;");
      PW.println("          }");
      PW.println("          ODepth = current.Depth;");
      PW.println("        }");
      PW.println("      }");
      PW.println("");
      PW.println("      previous = (PLayer) P_LayerList.get(P_LayerList.size()-1);");
      PW.println("      for (int i=P_LayerList.size()-2; i>=0; i--) {");
      PW.println("        current = (PLayer) P_LayerList.get(i);");
      PW.println("        T = current.Temp;");
      PW.println("        SS = current.Salinity;");
      PW.println("        Sigma = current.Density + 1000;");
      PW.println("        Alpha = -(C2 + (2 * C4 * T) + (C5 * SS) + (C6 * T * T) + (2 * C7 * SS * T)) / Sigma;");
      PW.println("        Alpha *= (2.0 * SysVars.stepInSeconds / Cp);");
      PW.println("        DeltaD = Alpha * (current.Full_Irrad - previous.Full_Irrad) / (previous.Depth - current.Depth);");
      PW.println("        DeltaD -= DChange;");
      PW.println("        current.Density -= DeltaD;");
      PW.println("        DChange = DeltaD;");
      PW.println("        previous = current;");
      PW.println("      }");
      PW.println("");
      PW.println("      if (oddTimeStep) {");
      PW.println("        previous = (PLayer) P_LayerList.get(P_LayerList.size()-1);");
      PW.println("        for (int i = P_LayerList.size()-2; i>=0; i--) {");
      PW.println("          current = (PLayer) P_LayerList.get(i);");
      PW.println("          if (current.Density >= previous.Density) {");
      PW.println("            current.Density = previous.Density - 0.0000000005;");
      PW.println("          }");
      PW.println("          previous = current;");
      PW.println("        }");
      PW.println("      } else {");
      PW.println("        previous = (PLayer) P_LayerList.get(0);");
      PW.println("        final int playerMax = P_LayerList.size();");
      PW.println("        for (int i = 1; i<playerMax; i++) {");
      PW.println("          current = (PLayer) P_LayerList.get(i);");
      PW.println("          if (current.Density <= previous.Density) {");
      PW.println("            current.Density = previous.Density + 0.0000000005;");
      PW.println("          }");
      PW.println("          previous = current;");
      PW.println("        }");
      PW.println("      }");
      PW.println("    } else {");
      PW.println("      final int playerMax = P_LayerList.size();");
      PW.println("      for (int i=0; i<playerMax; i++) {");
      PW.println("        current = (PLayer) P_LayerList.get(i);");
      PW.println("        current.Full_Irrad = 0;");
      PW.println("        current.Vis_Irrad = 0;");
      PW.println("        for (int j=0; j<25; j++) current.irrad[j]=0;");
      PW.println("      }");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      PW.println("");
      PW.println("  public void Convection() {");
      PW.println("    PLayer current,previous;");
      PW.println("    double DS, DZ, DeltaT, C, TStar;");
      PW.println("    double S = 0;");
      PW.println("    current = (PLayer) P_LayerList.get(0);");
      PW.println("    int maxI = 1;");
      PW.println("    int i = 1;");
      PW.println("");
      PW.println("    do {");
      PW.println("      previous = current;");
      PW.println("      current = (PLayer) P_LayerList.get(i);  // THIS LINE!!");
      PW.println("      S += 0.5 * (current.Depth + previous.Depth) * (current.Density - previous.Density);");
      PW.println("      maxI=i++;");
      PW.println("    } while (S < BStar);");
      PW.println("");
      PW.println("    DS = S - BStar;");
      PW.println("    DZ = current.Depth - previous.Depth;");
      PW.println("    DeltaT = current.Density - previous.Density;");
      PW.println("    C = (2 * DS * DZ) / DeltaT;");
      PW.println("    ZStar = Math.sqrt((current.Depth * current.Depth) - C);");
      PW.println("    TStar = previous.Density - ((DeltaT / DZ) * (previous.Depth - ZStar));");
      PW.println("    Salfa = 0;");
      PW.println("    previous = (PLayer) P_LayerList.get(0);");
      PW.println("    for (i=1; i<maxI; i++) {");
      PW.println("      current = (PLayer) P_LayerList.get(i);");
      PW.println("      Salfa += ((0.5 * (current.Density + previous.Density)) - TStar) * (current.Depth - previous.Depth) * (0.5 * (current.Depth + previous.Depth));");
      PW.println("      previous = current;");
      PW.println("    }");
      PW.println("    Salfa += (((0.5 * (previous.Density + TStar)) - TStar) * (ZStar - previous.Depth) * (0.5 * (ZStar + previous.Depth)));");
      PW.println("    for (i=0; i<maxI; i++) ((PLayer) P_LayerList.get(i)).Density = TStar;");
      PW.println("");
      PW.println("    current = (PLayer) P_LayerList.get(maxI);");
      PW.println("    if (((current.Depth - ZStar) >= 0.0001) || ((ZStar - previous.Depth) >= 0.0001)) {");
      PW.println("      PLayer newLayer = new PLayer();");
      PW.println("      P_LayerList.add(maxI,newLayer);");
      PW.println("      newLayer.TempAdj = previous.TempAdj; // Added for event compatibility");
      PW.println("      if ((ZStar - previous.Depth) < 0.0001) {");
      PW.println("        newLayer.Depth = ZStar + 0.00005;");
      PW.println("        newLayer.Salinity = previous.Salinity;");
      PW.println("        newLayer.Full_Irrad = previous.Full_Irrad;");
      PW.println("        newLayer.Vis_Irrad = previous.Vis_Irrad;");
      PW.println("      } else if ((current.Depth - ZStar) < 0.0001) {");
      PW.println("        newLayer.Depth = ZStar - 0.00005;");
      PW.println("        newLayer.Salinity = current.Salinity;");
      PW.println("        newLayer.Full_Irrad = current.Full_Irrad;");
      PW.println("        newLayer.Vis_Irrad = current.Vis_Irrad;");
      PW.println("      } else {");
      PW.println("        newLayer.Depth = ZStar;");
      PW.println("        newLayer.Salinity = ((current.Salinity - previous.Salinity) * (ZStar - previous.Depth) / (current.Depth - previous.Depth)) + previous.Salinity;");
      PW.println("        newLayer.Full_Irrad = (previous.Full_Irrad + current.Full_Irrad) / 2;");
      PW.println("        newLayer.Vis_Irrad = (previous.Vis_Irrad + current.Vis_Irrad) / 2;");
      PW.println("      }");
      PW.println("      newLayer.Density = TStar;");
      PW.println("      ZStar = newLayer.Depth;");
      PW.println("    } else ZStar = previous.Depth;");
      PW.println("");
      PW.println("  }");
      PW.println("");
      PW.println("  public void Mixing() {");
      PW.println("    PLayer current,previous,next;");
      PW.println("    double AFlob = 0, Flun, TMix = 0, ZMix, Tj, TjMin, Zj, ZjMin;");
      PW.println("    double Diff, EK, EW, DZ, DeltaT, DeltaE = 0, C, TStar_M=0, DZZMN, DZNZM =0;");
      PW.println("    double TempStar_M;");
      PW.println("    double a,a3,t_a2,b,b3,c,d,q,p,r,PHI,y3,S,T,Sigma;");
      PW.println("    double Zu = 0;");
      PW.println("    double Zo = 0;");
      PW.println("    double Tu = 0;");
      PW.println("    double To = 0;");
      PW.println("    int i = 0,j = 0,k = 0, m = 0;");
      PW.println("    current = (PLayer) P_LayerList.get(0);");
      PW.println("");
      PW.println("    EK = (-Salfa * CP_Eff);");
      PW.println("    EW = Mix_Eff * UStarCube * (current.Density + 1000) * SysVars.stepInSeconds / g;");
      PW.println("    //TKE = EW + EK;");
      PW.println("");
      PW.println("    while (current.Depth != ZStar) current = (PLayer) P_LayerList.get(++i);");
      PW.println("    double Flob = 0;");
      PW.println("");
      PW.println("    int Finished = 0;");
      PW.println("    while ((DeltaE <= Penerg) && (Finished == 0)) {");
      PW.println("      current = (PLayer) P_LayerList.get(i);");
      PW.println("      next = (PLayer) P_LayerList.get(i+1);");
      PW.println("      TMix = next.Density;");
      PW.println("      AFlob = Flob;");
      PW.println("      Flob += (0.5 * (next.Depth + current.Depth) * (TMix - current.Density));");
      PW.println("      PLayer currentJ = next;");
      PW.println("      Flun = 0;");
      PW.println("      j=i+1;");
      PW.println("      previous = currentJ; /* Needed for initialisation */");
      PW.println("");
      PW.println("      final int maxJ = P_LayerList.size()-1;");
      PW.println("      while ((Flun<Flob) && (j<maxJ)) {");
      PW.println("        previous = currentJ;");
      PW.println("        currentJ = (PLayer) P_LayerList.get(++j);");
      PW.println("        Flun += (currentJ.Density + previous.Density - (2.0 * TMix)) * 0.5 * (currentJ.Depth - previous.Depth);");
      PW.println("      }");
      PW.println("      if (Flun<Flob) {");
      PW.println("        Kernel.println(\"ERROR - Flun<Flob loop has tried to access a layer below bottom of column.\");");
      PW.println("      }");
      PW.println("");
      PW.println("      m = j;");
      PW.println("      Tj = currentJ.Density;");
      PW.println("      TjMin = previous.Density;");
      PW.println("      Zj = currentJ.Depth;");
      PW.println("      ZjMin = previous.Depth;");
      PW.println("      Diff = Flun-Flob;");
      PW.println("      DZ = Zj - ZjMin;");
      PW.println("      DeltaT = Tj - TjMin;");
      PW.println("      C = (-2 * Diff * DeltaT) / DZ;");
      PW.println("      TStar_M = Math.sqrt(C + ((Tj - TMix) * (Tj - TMix))) + TMix;");
      PW.println("");
      PW.println("      if (DeltaT < 0.000001)  ZStar_M = Zj - (Diff / (Tj - TMix)); else ZStar_M = ((DZ / DeltaT) * (TStar_M - Tj)) + Zj;");
      PW.println("");
      PW.println("      Penerg = (EK + EW) * Math.exp(-ZStar_M / EF_Depth);");
      PW.println("      DeltaE = 0;");
      PW.println("");
      PW.println("      previous = (PLayer) P_LayerList.get(0);");
      PW.println("      current = (PLayer) P_LayerList.get(1);");
      PW.println("      k=1;");
      PW.println("      while (k!=j) {");
      PW.println("        DeltaE += (( 0.5 * (current.Density + previous.Density)) - TMix) * (current.Depth - previous.Depth) * (0.5 * (current.Depth +     previous.Depth));");
      PW.println("        previous = current;");
      PW.println("        current = (PLayer) P_LayerList.get(++k);");
      PW.println("      }");
      PW.println("      DeltaE += ((0.5 * (TStar_M + previous.Density)) - TMix) * (ZStar_M - previous.Depth) * (0.5 * (ZStar_M + previous.Depth));");
      PW.println("      if (DeltaE > Penerg) {");
      PW.println("        if (((DeltaE - Penerg) / Penerg) <= 0.001)  { Finished = 1; }");
      PW.println("      } else {");
      PW.println("        if (((Penerg - DeltaE) / Penerg) <= 0.001) { Finished = 1; }");
      PW.println("        else { i++; }");
      PW.println("      }");
      PW.println("    }");
      PW.println("    if (Finished ==0) {");
      PW.println("      current = (PLayer) P_LayerList.get(i);");
      PW.println("      Tu = current.Density;");
      PW.println("      Zu = current.Depth;");
      PW.println("      next = (PLayer) P_LayerList.get(i+1);");
      PW.println("      To = next.Density;");
      PW.println("      Zo = next.Depth;");
      PW.println("      if (Math.abs(To-Tu) < 0.000001) { Finished = 1; }");
      PW.println("    }");
      PW.println("    while (Finished == 0) {");
      PW.println("    TMix = (Tu + To) * 0.5;");
      PW.println("      ZMix = (Zu + Zo) * 0.5;");
      PW.println("      current = (PLayer) P_LayerList.get(i);");
      PW.println("      next = (PLayer) P_LayerList.get(i+1);");
      PW.println("      previous = current;");
      PW.println("      Flob = AFlob + ((0.5 * (ZMix + current.Depth)) * (TMix - current.Density));");
      PW.println("      Flun = (next.Density - TMix) * (0.5 * (next.Depth - ZMix));");
      PW.println("      j=i+1;");
      PW.println("");
      PW.println("      int maxJ = P_LayerList.size()-1;");
      PW.println("      while ((Flun<Flob) && (j<maxJ)) {");
      PW.println("        previous = next;");
      PW.println("        next = (PLayer) P_LayerList.get(++j);");
      PW.println("        Flun += (next.Density + previous.Density - (2 * TMix)) * (0.5 * (next.Depth - previous.Depth));");
      PW.println("      }");
      PW.println("");
      PW.println("      if ((j>=maxJ) && (Flun<Flob)) {");
      PW.println("        System.out.println(\"Error in Flun<Flob loop. TMix = \"+TMix);");
      PW.println("        maxJ = P_LayerList.size();");
      PW.println("        for (j=0; j<maxJ; j++) {");
      PW.println("          PLayer _p = (PLayer) P_LayerList.get(j);");
      PW.println("          System.out.println(\"PLayer \"+j+\", depth = \"+_p.Depth+\", density = \"+_p.Density);");
      PW.println("        }");
      PW.println("        Logging.close();");
      PW.println("        System.exit(0);");
      PW.println("      }");
      PW.println("");
      PW.println("      m = j;");
      PW.println("      Tj = next.Density;   TjMin = previous.Density;");
      PW.println("      Zj = next.Depth;   ZjMin = previous.Depth;");
      PW.println("      Diff = Flun - Flob;");
      PW.println("      if (i+1 == j) { DZ = Zj - ZMix; DeltaT = Tj - TMix; } else { DZ = Zj - ZjMin; DeltaT = Tj - TjMin; }");
      PW.println("");
      PW.println("      C = (-2 * Diff * DeltaT ) / DZ;");
      PW.println("      TStar_M = Math.sqrt(C + ((Tj - TMix) * (Tj - TMix))) + TMix;");
      PW.println("      if (DeltaT < 0.000001) { ZStar_M = Zj - (Diff / (Tj - TMix)); } else { ZStar_M = Zj + ((DZ / DeltaT) * (TStar_M - Tj)); }");
      PW.println("      Penerg = (EK+EW) * Math.exp(-ZStar_M / EF_Depth);");
      PW.println("      DeltaE = 0;");
      PW.println("      previous = (PLayer) P_LayerList.get(0);");
      PW.println("      current = (PLayer) P_LayerList.get(1);");
      PW.println("      k=1;");
      PW.println("      while (k<=i) { /* original: while Old != Current => while k-1 < i) */");
      PW.println("        DeltaE += ((0.5 * (current.Density + previous.Density)) - TMix) * (current.Depth - previous.Depth) * (0.5 * (current.Depth + previous.Depth));");
      PW.println("        previous = current;");
      PW.println("        current = (PLayer) P_LayerList.get(++k);");
      PW.println("      }");
      PW.println("      DeltaE += ((0.5 * (TMix + previous.Density)) - TMix) * (ZMix - previous.Depth) * (0.5 * (ZMix + previous.Depth));");
      PW.println("      if (k == j) {");
      PW.println("        DeltaE += ((0.5 * (TMix + TStar_M)) - TMix) * (ZStar_M - ZMix) * (0.5 * (ZStar_M + ZMix));");
      PW.println("      } else {");
      PW.println("        DeltaE += ((0.5 * (TMix + current.Density)) - TMix) * (current.Depth - ZMix) * (0.5 * (ZMix + current.Depth));");
      PW.println("");
      PW.println("        if (k+1 != j) {");
      PW.println("          previous = (PLayer) P_LayerList.get(k);");
      PW.println("          current = (PLayer) P_LayerList.get(k+1);");
      PW.println("          int l=k+1;");
      PW.println("          while (l<j) {");
      PW.println("            DeltaE += ((0.5*(current.Density + previous.Density)) - TMix) * (current.Depth - previous.Depth) * (0.5 * (current.Depth + previous.Depth));");
      PW.println("            previous = current;");
      PW.println("            current = (PLayer) P_LayerList.get(++l);");
      PW.println("          }");
      PW.println("        } else { previous = (PLayer) P_LayerList.get(k); }");
      PW.println("        DeltaE += ((0.5 * (TStar_M + previous.Density)) - TMix) * (ZStar_M - previous.Depth) * (0.5 * (ZStar_M + previous.Depth));");
      PW.println("      }");
      PW.println("      if (DeltaE > Penerg) {");
      PW.println("        if (((DeltaE - Penerg) / Penerg) <= 0.001) { Finished=1; } else { To = TMix; Zo = ZMix; }");
      PW.println("      } else {");
      PW.println("        if (((Penerg - DeltaE) / Penerg) <= 0.001) { Finished=1; } else { Tu = TMix; Zu = ZMix; }");
      PW.println("      }");
      PW.println("");
      PW.println("      if (Math.abs(Tu - To) < 0.000001) { Finished=1; }");
      PW.println("    }");
      PW.println("    current = (PLayer) P_LayerList.get(0);");
      PW.println("    a = C6;");
      PW.println("    S = current.Salinity;");
      PW.println("    a3 = a*a*a;");
      PW.println("    t_a2 = 3*a*a;");
      PW.println("    b = C4+C7*S;");
      PW.println("    b3 = b*b*b;");
      PW.println("    c = C2 + C5 * S;");
      PW.println("");
      PW.println("    Sigma = TMix;");
      PW.println("    d = -Sigma + C1 + C3 * S;");
      PW.println("    q = 0.5 * ((2 * b3 / (27 * a3)) - (b*c/t_a2) + (d/a));");
      PW.println("    p = ((3 * a * c) - (b*b)) / (t_a2 * 3.0);");
      PW.println("    r = -Math.sqrt(Math.abs(p));");
      PW.println("    PHI = Math.acos(q/(r*r*r));");
      PW.println("    y3 = 2 * r * Math.cos((Pi / 3.0) + (PHI / 3.0));");
      PW.println("    T = y3 - (b / (3.0 * a));");
      PW.println("    MixTemp = T;");
      PW.println("");
      PW.println("    Sigma = TStar_M;");
      PW.println("    d = -Sigma + C1 + C3 * S;");
      PW.println("    q = 0.5 * ((2 * b3 / (27.0 * a3)) - (b*c/t_a2)+(d/a));");
      PW.println("    p = ((3 * a * c) - (b*b)) /(t_a2*3);");
      PW.println("    r = -Math.sqrt(Math.abs(p));");
      PW.println("    PHI = Math.acos(q/(r*r*r));");
      PW.println("    y3 = 2*r*Math.cos((Pi/3) + (PHI/3));");
      PW.println("    T = y3 - (b / (3.0 * a));");
      PW.println("    TempStar_M = T;");
      PW.println("");
      PW.println("    k=0;");
      PW.println("    while (k!=j) {");
      PW.println("      current.Density = TMix;");
      PW.println("      current.Temp = MixTemp;");
      PW.println("      current = (PLayer) P_LayerList.get(++k);");
      PW.println("    }");
      PW.println("    S = current.Salinity;");
      PW.println("    Sigma = current.Density;");
      PW.println("    previous = (PLayer) P_LayerList.get(k-1);");
      PW.println("    PLayer CPLayer = current;");
      PW.println("    b = C4+C7*S;");
      PW.println("    b3 = b*b*b;");
      PW.println("    c = C2 + C5 * S;");
      PW.println("    d = -Sigma + C1 + C3 * S;");
      PW.println("    q = 0.5*((2.0*b3/(27.0*a3))-(b*c/t_a2)+(d/a));");
      PW.println("    p = ((3.0*a*c)-(b*b))/(t_a2*3.0);");
      PW.println("    r = -Math.sqrt(Math.abs(p));");
      PW.println("    PHI = Math.acos(q/(r*r*r));");
      PW.println("    y3 = 2.0*r*Math.cos((Pi/3.0)+(PHI/3.0));");
      PW.println("    T = y3 - (b/(3.0*a));");
      PW.println("    current.Temp = T;");
      PW.println("    DZZMN = ZStar_M - previous.Depth;");
      PW.println("    DZNZM = current.Depth - ZStar_M;");
      PW.println("");
      PW.println("    if ((DZZMN >= 0.0002) || (DZNZM >= 0.0002)) {");
      PW.println("      current = new PLayer();");
      PW.println("      P_LayerList.add(k++,current); // used to be vector insert");
      PW.println("      if (DZNZM < 0.0002) {");
      PW.println("        if (DZZMN < 0.0004) { current.Depth = CPLayer.Depth - 0.0001; } else { current.Depth = CPLayer.Depth - 0.0002; }");
      PW.println("        current.Density = TMix;");
      PW.println("        current.Temp = MixTemp;");
      PW.println("        current.TempAdj = CPLayer.TempAdj;");
      PW.println("        current.Salinity = CPLayer.Salinity;");
      PW.println("        current.Full_Irrad = CPLayer.Full_Irrad;");
      PW.println("        current.Vis_Irrad = CPLayer.Vis_Irrad;");
      PW.println("      } else if (DZZMN < 0.0002) {");
      PW.println("        if (DZNZM < 0.0004) { current.Depth = previous.Depth + 0.0001; } else { current.Depth = previous.Depth + 0.0002; }");
      PW.println("        current.Density = TStar_M;");
      PW.println("        current.Temp = TempStar_M;");
      PW.println("        current.TempAdj = previous.TempAdj;");      
      PW.println("        current.Salinity = previous.Salinity;");
      PW.println("        current.Full_Irrad = previous.Full_Irrad;");
      PW.println("        current.Vis_Irrad = previous.Vis_Irrad;");
      PW.println("      } else {");
      PW.println("        current.Depth = ZStar_M - 0.0001;");
      PW.println("        current.Density = TMix;");
      PW.println("        current.Temp = MixTemp;");
      PW.println("        current.TempAdj = (CPLayer.TempAdj+previous.TempAdj)/2.0;");      
      PW.println("        current.Salinity = ((CPLayer.Salinity - previous.Salinity) * (current.Depth - previous.Depth) / (CPLayer.Depth - previous.Depth)) + previous.Salinity;");
      PW.println("        current.Full_Irrad = (CPLayer.Full_Irrad + previous.Full_Irrad) /2.0;");
      PW.println("        current.Vis_Irrad = (CPLayer.Vis_Irrad + previous.Vis_Irrad) /2.0;");
      PW.println("        previous = current;");
      PW.println("");
      PW.println("        current = new PLayer();");
      PW.println("        P_LayerList.add(k,current); // used to be vector insert");
      PW.println("        current.Depth = ZStar_M + 0.0001;");
      PW.println("        current.Density = TStar_M;");
      PW.println("");
      PW.println("        current.Temp = TempStar_M;");
      PW.println("        current.TempAdj = previous.TempAdj;");      
      PW.println("        current.Salinity = previous.Salinity;");
      PW.println("        current.Full_Irrad = previous.Full_Irrad;");
      PW.println("        current.Vis_Irrad = previous.Vis_Irrad;");
      PW.println("      }");
      PW.println("    }");
      PW.println("    for (k = m+1; k<P_LayerList.size(); k++) {");
      PW.println("      current = (PLayer) P_LayerList.get(k);");
      PW.println("      S = current.Salinity;");
      PW.println("      Sigma = current.Density;");
      PW.println("      b = C4 + C7 * S;");
      PW.println("      b3 = b*b*b;");
      PW.println("      c = C2 + C5 * S;");
      PW.println("      d = -Sigma + C1 + C3 * S;");
      PW.println("      q = 0.5 * ((2 * b3 / (27 * a3)) - (b*c/t_a2) + (d/a));");
      PW.println("      p = ((3 * a * c) - (b * b)) / (t_a2 * 3);");
      PW.println("      r = -Math.sqrt (Math.abs(p));");
      PW.println("      PHI = Math.acos (q/(r*r*r));");
      PW.println("      y3 = 2*r*Math.cos((Pi/3.0) + (PHI / 3.0));");
      PW.println("      T = y3 - (b/(3*a));");
      PW.println("      current.Temp = T;");
      PW.println("    }");
      PW.println("");
      PW.println("  }");
      PW.println("");
      PW.println("  public void Order() {");
      PW.println("    int i = 1, j=1;");
      PW.println("    PLayer ref = (PLayer) P_LayerRefList.get(0);");
      PW.println("    PLayer current = (PLayer) P_LayerList.get(0);");
      PW.println("    ref.Full_Irrad = current.Full_Irrad;");
      PW.println("    ref.Vis_Irrad = current.Vis_Irrad;");
      PW.println("    ref.Density = current.Density;");
      PW.println("    ref.Salinity = current.Salinity;");
      PW.println("    ref.Temp = current.Temp;");
      PW.println("    ref.AvgTemp += current.Temp;");
      PW.println("    ref.AvgIrrad += current.Vis_Irrad;");
      PW.println("    ref.AvgDens += current.Density;");
      PW.println("    ref.AvgSaln += current.Salinity;");
      PW.println("");
      PW.println("    while (i<P_LayerRefList.size()) {");
      PW.println("      ref = (PLayer) P_LayerRefList.get(i);");
      PW.println("      current = (PLayer) P_LayerList.get(j);");
      PW.println("      if (ref.Depth != current.Depth) {");
      PW.println("        PLayer next = (PLayer) P_LayerList.get(j+1);");
      PW.println("        if ((current.Density == next.Density)) // || (current.Density != ((PLayer) P_LayerList.get(j-1)).Density))");
      PW.println("        {");
      PW.println("          P_LayerList.remove(j--);");
      PW.println("        }");
      PW.println("        i--;");
      PW.println("      } else {");
      PW.println("        ref.Full_Irrad = current.Full_Irrad;");
      PW.println("        ref.Vis_Irrad = current.Vis_Irrad;");
      PW.println("        ref.Density = current.Density;");
      PW.println("        ref.Salinity = current.Salinity;");
      PW.println("        ref.Temp = current.Temp;");
      PW.println("        ref.AvgTemp += current.Temp;");
      PW.println("        ref.AvgIrrad += current.Vis_Irrad;");
      PW.println("        ref.AvgDens += current.Density;");
      PW.println("        ref.AvgSaln += current.Salinity;");
      PW.println("      }");
      PW.println("      i++;");
      PW.println("      j++;");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      if (upwellingWanted) {
        PW.println("  public void Upwelling() {");
        PW.println("    double D1,D2,T1,T2,W2,BaseDepth;");
        PW.println("    int i=0, j=0;");
        PW.println("    D2 = B_Layer.length - MLDepth;");
        PW.println("    while (i < P_LayerRefList.size()) {");
        PW.println("      PLayer ref = (PLayer) P_LayerRefList.get(i);");
        PW.println("      PLayer current = (PLayer) P_LayerList.get(j);");
        PW.println("      while (current.Depth < ref.Depth) current = (PLayer) P_LayerList.get(++j);");
        PW.println("      if (ref.Depth <= MLDepth) {ref.Vis_Irrad = ref.Depth / MLDepth; }");
        PW.println("      else { ref.Vis_Irrad = (B_Layer.length - ref.Depth) / D2; }");
        PW.println("      ref.Density = current.Density;");
        PW.println("      ref.Salinity = current.Salinity;");
        PW.println("      i++;");
        PW.println("      }");
        PW.println("");
        PW.println("    i=0;");
        PW.println("");
        PW.println("    while (((PLayer) P_LayerRefList.get(i)).Depth < 1.0) i++;");
        PW.println("    PLayer ref,next,current;");
        PW.println("    for (j=0; j<3; j++) {");
        PW.println("      ref = (PLayer) P_LayerRefList.get(i);");
        PW.println("      D2 = ((PLayer) P_LayerRefList.get(i)).Density;");
        PW.println("      T2 = ((PLayer) P_LayerRefList.get(i)).Salinity;");
        PW.println("      double Calc;");
        PW.println("      for (int k=i+1; k<P_LayerRefList.size(); k++) {");
        PW.println("        next = (PLayer) P_LayerRefList.get(k);");
        PW.println("        ref = (PLayer) P_LayerRefList.get(k-1);");
        PW.println("        D1 = D2;");
        PW.println("        T1 = T2;");
        PW.println("        D2 = ref.Density;");
        PW.println("        T2 = ref.Salinity;");
        PW.println("        Calc = (Ekman/6.0) * ref.Vis_Irrad * (next.Density - D1);");
        PW.println("        ref.Density -= Calc;");
        PW.println("        Calc = (Ekman/6.0) * ref.Vis_Irrad * (next.Salinity - T1);");
        PW.println("        ref.Salinity -= Calc;");
        PW.println("      }");
        PW.println("    }");
        PW.println("");
        PW.println("    ref = (PLayer) P_LayerRefList.get(0);        // Top element in P_Layer_Ref");
        PW.println("    current = (PLayer) P_LayerRefList.get(i);      // First layer with depth >= 1.");
        PW.println("    D1 = ref.Density;");
        PW.println("    D2 = current.Density - D1;");
        PW.println("    T1 = ref.Salinity;");
        PW.println("    T2 = current.Salinity - T1;");
        PW.println("    current = (PLayer) P_LayerList.get(1);");
        PW.println("    j = 1;");
        PW.println("    while (current.Depth < 1) {");
        PW.println("      current.Density = D1 + (current.Depth * D2);");
        PW.println("      current.Salinity = T1 + (current.Depth * T2);");
        PW.println("      current = (PLayer) P_LayerList.get(++j);");
        PW.println("    }");
        PW.println("");
        PW.println("    ref = (PLayer) P_LayerRefList.get(i);    // First layer with depth>=1 again");
        PW.println("    PLayer StartP;");
        PW.println("");
        PW.println("    while (i<P_LayerRefList.size()) {        // For every layer from there to end.");
        PW.println("      StartP = (PLayer) P_LayerRefList.get(i);");
        PW.println("      current = (PLayer) P_LayerList.get(j);");
        PW.println("      if (current==null) { i++; } else {");
        PW.println("        if (current.Depth == StartP.Depth) {");
        PW.println("          current.Density = StartP.Density;");
        PW.println("          current.Salinity = StartP.Salinity;");
        PW.println("          ref=StartP;");
        PW.println("          i++;");
        PW.println("        } else {");
        PW.println("          D2 = StartP.Density - ref.Density;");
        PW.println("          T2 = StartP.Salinity - ref.Salinity;");
        PW.println("          D1 = current.Depth - ref.Depth;");
        PW.println("          current.Density = ref.Density + (D1 * D2);");
        PW.println("          current.Salinity = ref.Salinity + (D1 * T2);");
        PW.println("        }");
        PW.println("        j++;");
        PW.println("");
        PW.println("");
        PW.println("      }");
        PW.println("    }");
        PW.println("    D1 = SysVars._layers;");
        PW.println("    D2 = D1 - MLDepth;");
        PW.println("    double content1[] = new double["+chemCount+"];");
        PW.println("    double content2[] = new double["+chemCount+"];");
        PW.println("    for (i=0; i<3; i++) {");
        PW.println("");
        PW.println("      BaseDepth = 1.0;");
        PW.println("      BLayer currentB = B_Layer[0];");
        PW.println("      for (int k=0; k<chemCount; k++) content2[k] = currentB.solution_chem[k];");
        PW.println("");
        PW.println("      for (j=1; j<SysVars._layers; j++) {");
        PW.println("");
        PW.println("        BLayer nextB = B_Layer[j];");
        PW.println("        for (int k=0; k<chemCount; k++) content1[k] = content2[k];");
        PW.println("        if (BaseDepth < MLDepth) {");
        PW.println("          W2 = BaseDepth/MLDepth;");
        PW.println("        } else {");
        PW.println("          W2 = (D1 - BaseDepth) / D2;");
        PW.println("        }");
        PW.println("        for (int k=0; k<chemCount; k++) {");
        PW.println("          content2[k] = currentB.solution_chem[k];");
        PW.println("          double Calc = (Ekman/6.0) * W2 * (nextB.solution_chem[k] - content1[k]);");
        PW.println("          currentB.Chemicals[k].solution_chem[k]-=Calc;");
        PW.println("        }");
        PW.println("        currentB = nextB;");
        PW.println("        BaseDepth += 1.0;");
        PW.println("      }");
        PW.println("    }");
        PW.println("  }");
        PW.println("");
      }
      if (AdvWanted) {
        PW.println("  public void Advection() {");
        PW.println("    double w1 = Cp * Adv_EFold * (1.0 - Math.exp(-Adv_Depth / Adv_EFold));");
        PW.println("    double adt = Adv_Temp * SysVars.stepInSeconds;");
        PW.println("    if (AdvWanted!=0) {");
        PW.println("      PLayer current = (PLayer) P_LayerList.get(0);");
        PW.println("      for (int i=0; i<P_LayerList.size(); i++) {");
        PW.println("        current = (PLayer) P_LayerList.get(i);");
        PW.println("        double T = current.Temp;");
        PW.println("        double S = current.Salinity;");
        PW.println("        double Sigma = current.Density + 1000.0;");
        PW.println("        double adts = adt * ( -(C2+(Adv_C4*T)+(C5*S)+(C6*T*T)+(Adv_C7*S*T))/Sigma);");
        PW.println("        current.Density -= (adts / w1 * Math.exp(-current.Depth / Adv_EFold));");
        PW.println("      }");
        PW.println("    }");
        PW.println("  }");
      }
      PW.println("");
      PW.println("  public WaterCol() {");
      PW.println("    for (int chemNo=0; chemNo<"+chemCount+"; chemNo++) {");
      PW.println("      for (int speciesNo=0; speciesNo<"+speciesCount+"; speciesNo++) {");
      PW.println("        final FunctionalGroup fg = Kernel.getSpecies(speciesNo);");
      PW.println("        particulate_chem_ss[chemNo][speciesNo] = new double[fg.getStageCount()];");
      PW.println("      }");
      PW.println("    }");
      PW.println("    for (int speciesNo=0; speciesNo<"+speciesCount+"; speciesNo++) {");
      PW.println("      final FunctionalGroup fg = Kernel.getSpecies(speciesNo);");
      PW.println("      final int stageCount = fg.getStageCount();");
      PW.println("      AgentCounts[speciesNo] = new int[stageCount];");
      PW.println("      SpeciesStateDemographyCol[speciesNo] = new double[stageCount][];");
      PW.println("      SpeciesTotal[speciesNo] = new double[stageCount];");
      PW.println("      agents[speciesNo] = new ArrayList[stageCount];");
      PW.println("      agentQueue[speciesNo] = new ArrayList[stageCount];");
      PW.println("      removeQueue[speciesNo] = new ArrayList[stageCount];");
      PW.println("      changeQueue[speciesNo] = new ArrayList[stageCount];");
      PW.println("      for (int stageNo=0; stageNo<stageCount; stageNo++) {");
      PW.println("        agents[speciesNo][stageNo] = new ArrayList();");
      PW.println("        agentQueue[speciesNo][stageNo] = new ArrayList();");
      PW.println("        removeQueue[speciesNo][stageNo] = new ArrayList();");
      PW.println("        changeQueue[speciesNo][stageNo] = new ArrayList();");
      PW.println("        SpeciesStateDemographyCol[speciesNo][stageNo] = new double[SysVars.countDeathReasons()];");
      PW.println("      }");
      PW.println("    }");

      PW.println("    B_Layer = new BLayer[SysVars._layers];");
      PW.println("    int i;");
      PW.println("    for (i=0; i<B_Layer.length; i++) B_Layer[i]=new BLayer(i,1);");
      PW.println("    mixedLayer = new BLayer(0,1);");
      PW.println("    lostParticles = new int["+speciesCount+"][];");
      PW.println("    for (i=0; i<lostParticles.length; i++) {");
      PW.println("      lostParticles[i] = new int[Kernel.getStageCount(i)];");
      PW.println("      for (int j=0; j<lostParticles[i].length; j++) lostParticles[i][j]=0;");
      PW.println("    }");
      PW.println("");
      PW.println("    P_LayerRefList = new ArrayList();");
      PW.println("    P_LayerList = new ArrayList();");
      PW.println("    InitialDataObject _ID = Utils.getInitialData();");
      PW.println("");
      PW.println("    for (i=0; i<_ID.Layers.length; i++) {");
      PW.println("      PLayer P1 = new PLayer();");
      PW.println("      InitialDataLayer PL = _ID.Layers[i];");
      PW.println("      P1.Temp = PL.Temperature;");
      PW.println("      P1.Salinity = PL.Salinity;");
      PW.println("      P1.Density= PL.Density;");
      PW.println("      P1.Depth = PL.Depth;");
      PW.println("      P_LayerList.add(P1);");
      PW.println("      if (PL.MixedLayerStatus==InitialDataLayer.EqualsMixedLayer) {");
      PW.println("        if (PL.Depth % 1 == 0) {");
      PW.println("          PLayer P2 = new PLayer();");
      PW.println("          P2.Temp = PL.Temperature;");
      PW.println("          P2.Salinity = PL.Salinity;");
      PW.println("          P2.Density= PL.Density;");
      PW.println("          P2.Depth = PL.Depth;");
      PW.println("          P_LayerRefList.add(P2);");
      PW.println("        }");
      PW.println("      } else {");
      PW.println("        PLayer P2 = new PLayer();");
      PW.println("        P2.Temp = PL.Temperature;");
      PW.println("        P2.Salinity = PL.Salinity;");
      PW.println("        P2.Density= PL.Density;");
      PW.println("        P2.Depth = PL.Depth;");
      PW.println("        P_LayerRefList.add(P2);");
      PW.println("      }");
      PW.println("    }");
      PW.println("    MLDepth=_ID.MixedLayerDepth;");
      PW.println("    for (i=0; i<"+chemCount+"; i++) {");
      PW.println("      solution_chem[i]=0;");
      PW.println("      String s = B_Layer[0].Chemicals[i].name();");
      PW.println("      double[] chemDistrib = Utils.getNutrient(_ID,s);");
      PW.println("      for (int j=0; j<B_Layer.length; j++) {");
      PW.println("        B_Layer[j].solution_chem[i]=Math.max(0,chemDistrib[j]);");
      PW.println("        solution_chem[i]+=B_Layer[j].solution_chem[i];");
      PW.println("        total_chem[i]+=B_Layer[j].solution_chem[i];");
      PW.println("      }");
      PW.println("    }");
      PW.println("    for (int j=0; j<"+chemCount+"; j++) {");
      PW.println("      for (i=0; i<1+(int)MLDepth; i++) {");
      PW.println("        mixedLayer.solution_chem[j]+=B_Layer[i].solution_chem[j];");
      PW.println("      }");
      PW.println("    }");
      PW.println("    mixedLayer.Height=1+(int)MLDepth;");
      PW.println("  }");
      PW.println("");
      PW.println("/******************************************************************************/");
      PW.println("/*                 Update Physics, Chemistry, and Biology                     */");
      PW.println("/******************************************************************************/");
      PW.println("");
      PW.println("  public void updateChemistry() {");
      PW.println("    final double[] ChemicalTotals = new double["+chemCount+"];");
      PW.println("    for (int i=0; i<"+chemCount+"; i++) ChemicalTotals[i]=0;");
      PW.println("    SysVars.conserveChemicals(this);");
      if (VEWController2.NOC_Mode) {
        if (model.getTag("VerticalDiffusion")!=null) {
          if (model.getTag("VerticalDiffusion").getValue("useVD").equals("true")) {
            PW.println("    SysVars.VerticalDiffusion(Kernel.W);");
          }
        }
      }
      PW.println("    double mldLayers=0;");
      PW.println("    for (int layer=0; layer < B_Layer.length; layer++) {");
      PW.println("      B_Layer[layer].updateChemistry();");
      PW.println("      if (layer<MLDepth) {");
      PW.println("        for (int i=0; i<"+chemCount+"; i++) ChemicalTotals[i]+=B_Layer[layer].solution_chem[i];");
      PW.println("        mldLayers++;");
      PW.println("      }");
      PW.println("    }");
      PW.println("    for (int j=0; j<"+chemCount+"; j++) {");
      PW.println("      mixedLayer.solution_chem[j]=ChemicalTotals[j];");
      PW.println("      ChemicalTotals[j]/=mldLayers;");
      PW.println("      for (int layer=0; layer<mldLayers; layer++)");
      PW.println("        B_Layer[layer].solution_chem[j]=ChemicalTotals[j];");
      PW.println("    }");
      PW.println("    mixedLayer.Height=mldLayers;");
      PW.println("  }");
      PW.println("");
      PW.println("  public void agentManagement() {");
      PW.println("    removeQueuedAgents();");
      PW.println("    changeQueuedAgents();");
      PW.println("    addQueuedAgents();");
      PW.println("    performParticleManagement();");
      PW.println("  }");
      PW.println("");
      PW.println("  public void handleDepletion() {");
      PW.println("    mixedLayer.updateLayer();");
      PW.println("    for (int b=(int)MLDepth; b<B_Layer.length; b++) B_Layer[b].updateLayer();");
      PW.println("    double MLD_int=1+(int)MLDepth;");
      PW.println("    for (int blayer=0; blayer<MLD_int; blayer++) {");
      PW.println("      for (int chemNo=0; chemNo<"+chemCount+"; chemNo++) {");
      PW.println("        B_Layer[blayer].solution_chem[chemNo]=mixedLayer.solution_chem[chemNo]/MLD_int;");
      PW.println("        B_Layer[blayer].particulate_chem[chemNo]=mixedLayer.particulate_chem[chemNo]/MLD_int;");
      PW.println("        for (int spec=0; spec<"+speciesCount+"; spec++) {");
      PW.println("          for (int stage=0; stage<AgentCounts[spec].length; stage++) {");
      PW.println("            B_Layer[blayer].particulate_chem_ss[chemNo][spec][stage]=mixedLayer.particulate_chem_ss[chemNo][spec][stage]/MLD_int;");
      PW.println("            B_Layer[blayer].SpeciesConcentration[spec][stage]=mixedLayer.SpeciesConcentration[spec][stage]/MLD_int;");
      PW.println("          }");
      PW.println("        }");
      PW.println("      }");
      PW.println("    }");
      PW.println("    for (int chemNo=0; chemNo<"+chemCount+"; chemNo++) {");
      PW.println("      solution_chem[chemNo]=0;");
      PW.println("      for (int blayer=0; blayer<B_Layer.length; blayer++)");
      PW.println("        solution_chem[chemNo]+=B_Layer[blayer].solution_chem[chemNo];");
      PW.println("    }");
      PW.println("    for (int i=0; i<"+chemCount+"; i++) total_chem[i]=particulate_chem[i]+solution_chem[i];");
      PW.println("  }");
      PW.println("");
      PW.println("  public void updateBiology() {");
      PW.println("    Logging.update();");
      PW.println("    Kernel.W.resetStats();");
      PW.println("    for (int i=0; i<"+speciesCount+"; i++) {");
      PW.println("      for (int j=0; j<agents[i].length; j++) {");
      PW.println("        final int noAgents = agents[i][j].size();");
      PW.println("        for (int k=0; k<noAgents; k++) {");
      PW.println("          final FunctionalGroup fg = (FunctionalGroup) agents[i][j].get(k);");
      PW.println("          fg.index=k;");
      PW.println("          fg.update();");
      PW.println("        }");
      PW.println("      }");
      PW.println("    }");
      PW.println("    for (int i=0; i<"+chemCount+"; i++) Kernel.W.total_chem[i]+=Kernel.W.particulate_chem[i]+Kernel.W.solution_chem[i];");
      PW.println("  }");
      PW.println("");
      PW.println("  public boolean isPMTime(long start, long end, boolean yearly) {");
      PW.println("    if (!yearly) return ((Kernel.myTime>=start) && (Kernel.myTime<=end));");
      PW.println("    else {");
      PW.println("      pmCal1.setTimeInMillis(start);");
      PW.println("      pmCal2.setTimeInMillis(end);");
      PW.println("      pmCal3.setTimeInMillis(Kernel.myTime);");
      PW.println("      pmCal1.set(GregorianCalendar.YEAR,2007);");
      PW.println("      pmCal2.set(GregorianCalendar.YEAR,2007);");
      PW.println("      pmCal3.set(GregorianCalendar.YEAR,2007);");
      PW.println("      final long millis = pmCal3.getTimeInMillis();");
      PW.println("      return ((millis>pmCal1.getTimeInMillis()) && (millis<=pmCal2.getTimeInMillis()));");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      PW.println("  public void performParticleManagement() {");
      PW.println("    ParticleManager.maintainLostParticles(this);");
      PW.println("");
      PW.println("    // And now other split and merge rules.");
      PW.println("");
      PW.println("    for (int rule=0; rule<SysVars.PMRules.length; rule++) {");
      PW.println("      if (SysVars.PMRules[rule].length>8) {");
      PW.println("        final int scope = (int) SysVars.PMRules[rule][0];");
      PW.println("        final int type = (int) SysVars.PMRules[rule][1];");
      PW.println("        final int specno = (int) SysVars.PMRules[rule][2];");
      PW.println("        final int stageno = (int) SysVars.PMRules[rule][3];");
      PW.println("        final int value = (int) SysVars.PMRules[rule][4];");
      PW.println("        final int top = (SysVars.PMRules[rule][5]==SysVars.TURBO)?");
      PW.println("                   ((int) Math.floor(Kernel.W.MLDepth))");
      PW.println("                   :((int) SysVars.PMRules[rule][5]);");
      PW.println("        final int bottom = (SysVars.PMRules[rule][6]==SysVars.TURBO)?");
      PW.println("                   ((int) Math.floor(Kernel.W.MLDepth))");
      PW.println("                   :((int) SysVars.PMRules[rule][6]);");
      PW.println("        final long startTime = SysVars.PMRules[rule][7];");
      PW.println("        final long endTime = SysVars.PMRules[rule][8];");
      PW.println("        final boolean yearly = ((int)SysVars.PMRules[rule][9]==SysVars.YEARLY);");
      PW.println("        if ((startTime==SysVars.ALL_TIME) || (isPMTime(startTime,endTime,yearly))) {");
      PW.println("          if (type==SysVars.SPLIT) {");
      PW.println("            if (scope==SysVars.COLUMN) {");
      PW.println("              ParticleManager.splitColumn(Kernel.W,specno,stageno,value);");
      PW.println("            } else if (scope==SysVars.LAYER) {");
      PW.println("              for (int layNo=top; layNo<=bottom; layNo++){");
      PW.println("                ParticleManager.splitLayer(Kernel.W.B_Layer[layNo],specno,stageno,value);");
      PW.println("              }");
      PW.println("            } else if (scope==SysVars.MIXING) {");
      PW.println("              ParticleManager.splitMixLayer(Kernel.W,specno,stageno,value);");
      PW.println("            }");
      PW.println("          } else if (type==SysVars.MERGE) {");
      PW.println("            if (scope==SysVars.COLUMN) {");
      PW.println("              ParticleManager.mergeColumn(Kernel.W,specno,stageno,value);");
      PW.println("            } else if (scope==SysVars.LAYER) {");
      PW.println("              for (int layNo=top; layNo<=bottom; layNo++) {");
      PW.println("                ParticleManager.mergeLayer(Kernel.W.B_Layer[layNo],specno,stageno,value);");
      PW.println("              }");
      PW.println("            } else if (scope==SysVars.MIXING) {");
      PW.println("              ParticleManager.mergeMixLayer(Kernel.W,specno,stageno,value);");
      PW.println("            }");
      PW.println("          }");
      PW.println("        }");
      PW.println("      }");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      PW.println("  /* SNAPSHOT SUPPORT */");
      PW.println("");
      PW.println("  public void clearSystem() { // Empty system before re-load snapshot");
      PW.println("    for (int i=0; i<"+speciesCount+"; i++) {");
      PW.println("      for (int j=0; j<agents[i].length; j++) {");
      PW.println("        final int agentCount = agents[i][j].size();");
      PW.println("        for (int k=0; k<agentCount; k++) {");
      PW.println("          ((FunctionalGroup) agents[i][j].get(k)).freeParticle();");
      PW.println("        }");
      PW.println("        agents[i][j].clear();");
      PW.println("      }");
      PW.println("    }");
      PW.println("    P_LayerList.clear();");
      PW.println("    P_LayerRefList.clear();");
      PW.println("  }");
      PW.println("");
      PW.println("  public void writePhysicsSnapshot(DataOutputStream snapshot/*, ObjectOutputStream snapObject*/) {");
      PW.println("    try {");
      PW.println("      snapshot.writeInt(P_LayerList.size());");
      PW.println("      for (int i=0; i<P_LayerList.size(); i++)");
      PW.println("        ((PLayer)P_LayerList.get(i)).writeSnapshot(snapshot);");
      PW.println("      snapshot.writeInt(P_LayerRefList.size());");
      PW.println("      for (int i=0; i<P_LayerRefList.size(); i++)");
      PW.println("        ((PLayer)P_LayerRefList.get(i)).writeSnapshot(snapshot);");
      PW.println("      snapshot.writeInt(PLayer.Count);");
      PW.println("      snapshot.writeDouble(MLDepth);");
      PW.println("      snapshot.writeDouble(MixTemp);");
      PW.println("      snapshot.writeDouble(Max_MLD);");
      PW.println("      snapshot.writeDouble(Min_MLD);");
      PW.println("      snapshot.writeBoolean(offSeason);");
      PW.println("      snapshot.writeDouble(deepestTurboclineThisYear);");
      PW.println("      snapshot.writeDouble(deepestTurboclineEver);");
      PW.println("      snapshot.writeBoolean(gettingDeeper);");
      PW.println("      snapshot.writeDouble(bounceDepth);");
      PW.println("      snapshot.writeDouble(oldBounceDepth);");
      PW.println("      snapshot.writeInt(SysVars.deadPeriod);");
      PW.println("      snapshot.writeBoolean(oddTimeStep);");
      PW.println("      snapshot.writeDouble(Kernel.DTime);");
      PW.println("");
      PW.println("");
      PW.println("");
      PW.println("    } catch (Exception e) { e.printStackTrace(); }");
      PW.println("  }");
      PW.println("");
      PW.println("  public void readPhysicsSnapshot(DataInputStream snapshot/*, ObjectInputStream snapObject*/) {");
      PW.println("    try {");
      PW.println("      int plSize = snapshot.readInt();");
      PW.println("      for (int i=0; i<plSize; i++) {");
      PW.println("        PLayer.addLayerFromSnapshot(P_LayerList,snapshot);");
      PW.println("      }");
      PW.println("      int plRSize = snapshot.readInt();");
      PW.println("      for (int i=0; i<plRSize; i++) {");
      PW.println("        PLayer.addLayerFromSnapshot(P_LayerRefList,snapshot);");
      PW.println("      }");
      PW.println("      PLayer.Count = snapshot.readInt();");
      PW.println("      MLDepth = snapshot.readDouble();");
      PW.println("      MixTemp = snapshot.readDouble();");
      PW.println("      Max_MLD = snapshot.readDouble();");
      PW.println("      Min_MLD = snapshot.readDouble();");
      PW.println("      offSeason = snapshot.readBoolean();");
      PW.println("      deepestTurboclineThisYear = snapshot.readDouble();");
      PW.println("      deepestTurboclineEver = snapshot.readDouble();");
      PW.println("      gettingDeeper = snapshot.readBoolean();");
      PW.println("      bounceDepth = snapshot.readDouble();");
      PW.println("      oldBounceDepth = snapshot.readDouble();");
      PW.println("      SysVars.deadPeriod = snapshot.readInt();");
      PW.println("      oddTimeStep = snapshot.readBoolean();");
      PW.println("      Kernel.DTime = snapshot.readDouble();");
      PW.println("");
      PW.println("    } catch (Exception e) { e.printStackTrace(); }");
      PW.println("  }");
      PW.println("");
      PW.println("  public void writeBiologicalSnapshot(DataOutputStream snapshot) {");
      PW.println("    try {");
      PW.println("      for (int i=0; i<"+speciesCount+"; i++) {");
      PW.println("        final int stageCount=agents[i].length;");
      PW.println("        for (int j=0; j<stageCount; j++) {");
      PW.println("          final int agentcount=agents[i][j].size();");
      PW.println("          snapshot.writeInt(agentcount);");
      PW.println("          for (int k=0; k<agentcount; k++) {");
      PW.println("            ((FunctionalGroup)agents[i][j].get(k)).writeSnapshot(snapshot);");
      PW.println("          }");
      PW.println("        }");
      PW.println("      }");
      PW.println("      for (int i=0; i<B_Layer.length; i++) B_Layer[i].writeChemicalsToSnapshot(snapshot);");      
      PW.println("      for (int i=0; i<B_Layer.length; i++) B_Layer[i].writeStatsToSnapshot(snapshot);");
      PW.println("      Kernel.W.mixedLayer.writeChemicalsToSnapshot(snapshot);");
      PW.println("      Kernel.W.mixedLayer.writeStatsToSnapshot(snapshot);");
      PW.println("      snapshot.writeLong(FunctionalGroup.IDCount);");
      PW.println("      for (int i=0; i<lostParticles.length; i++) {");
      PW.println("        for (int j=0; j<lostParticles[i].length; j++) {");
      PW.println("          snapshot.writeInt(lostParticles[i][j]);");
      PW.println("        }");
      PW.println("      }");
      PW.println("    } catch(Exception e) { e.printStackTrace(); }");
      PW.println("  }");
      PW.println("");
      PW.println("  public void readBiologicalSnapshot(DataInputStream snapshot) {");
      PW.println("    try {");
      PW.println("      for (int i=0; i<"+speciesCount+"; i++) {");
      PW.println("        final int stageCount=agents[i].length;");
      PW.println("        for (int j=0; j<stageCount; j++) {");
      PW.println("          final int agentcount=snapshot.readInt();");
      PW.println("          for (int k=0; k<agentcount; k++) {");
      PW.println("            agents[i][j].add(Kernel.getSpecies(i).readSnapshot(snapshot));");
      PW.println("          }");
      PW.println("        }");
      PW.println("      }");
      PW.println("      for (int i=0; i<B_Layer.length; i++) B_Layer[i].readChemicalsFromSnapshot(snapshot);");
      PW.println("      for (int i=0; i<B_Layer.length; i++) B_Layer[i].readStatsFromSnapshot(snapshot);");
      PW.println("      Kernel.W.mixedLayer.readChemicalsFromSnapshot(snapshot);");
      PW.println("      Kernel.W.mixedLayer.readStatsFromSnapshot(snapshot);");
      PW.println("      FunctionalGroup.IDCount = snapshot.readLong();");
      PW.println("      for (int i=0; i<lostParticles.length; i++) {");
      PW.println("        for (int j=0; j<lostParticles[i].length; j++) {");
      PW.println("          lostParticles[i][j]=snapshot.readInt();");
      PW.println("        }");
      PW.println("      }");
      PW.println("    } catch(Exception e) { e.printStackTrace(); }");
      PW.println("  }");
      PW.println("");
      PW.println("  public void resetStats() {");
      PW.println("    for (int chemNo=0; chemNo<"+chemCount+"; chemNo++) {");
      PW.println("      particulate_chem[chemNo]=0;");
      PW.println("      for (int speciesNo=0; speciesNo<particulate_chem_ss[chemNo].length; speciesNo++) {");
      PW.println("        for (int stageNo=0; stageNo<particulate_chem_ss[chemNo][speciesNo].length; stageNo++) {");
      PW.println("          particulate_chem_ss[chemNo][speciesNo][stageNo]=0;");
      PW.println("        }");
      PW.println("      }");
      PW.println("    }");
      
      PW.println("    for (int specNo=0; specNo<"+speciesCount+"; specNo++) {");
      PW.println("      for (int stageNo=0; stageNo<SpeciesTotal[specNo].length; stageNo++) {");
      PW.println("        for (int reasons=0; reasons < SysVars.countDeathReasons(); reasons++) {");
      PW.println("          SpeciesTotal[specNo][stageNo]=0;");
      PW.println("          AgentCounts[specNo][stageNo]=0;");
      PW.println("          SpeciesStateDemographyCol[specNo][stageNo][reasons]=0;");
      PW.println("        }");
      PW.println("      }");
      PW.println("      resetIngestionVars();");
      PW.println("    }");
      PW.println("");
      PW.println("    for (int layerNo=0; layerNo<B_Layer.length; layerNo++) {");
      PW.println("      B_Layer[layerNo].resetStats();");
      PW.println("    }");
      PW.println("    mixedLayer.resetStats();");
      PW.println("  }");
      PW.println("}");
      PW.flush();
      PW.close();
    } catch (Exception e) { e.printStackTrace(); }
  }
}