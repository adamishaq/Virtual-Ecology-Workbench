package VEW.Compiler2;

import java.io.PrintWriter;

import VEW.Common.StringTools;
import VEW.Common.XML.XMLTag;


public class UtilsMaker {
  public static void writeUtilsJava(String fileName, XMLTag model) {
    try {
      PrintWriter PW = StringTools.OpenOutputFile(fileName);
      PW.println(" package VEW.Sim;");
      PW.println("");
      PW.println("import java.io.DataInputStream;");
      PW.println("import java.io.BufferedInputStream;");
      PW.println("import java.io.ObjectInputStream;");
      PW.println("import java.io.File;");
      PW.println("import VEW.Common.*;");
      PW.println("import VEW.Common.Random.*;");
      PW.println("");
      PW.println("");
      PW.println("public class Utils {");
      PW.println("  public static RanMT rnd = new RanMT();");
      PW.println("  private static boolean useAuditInfo = false;");
      PW.println("");
      PW.println("  private Utils u = null;");
      PW.println("  private Utils() {}");
      PW.println("  public Utils getInstance() {");
      PW.println("    if (u==null) {u = new Utils(); }");
      PW.println("    return u;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static void setSeed(long s) {");
      PW.println("    rnd.setSeed(s);");
      PW.println("  }");
      PW.println("");
      PW.println("  public static void setAuditFile(String f) {");
      PW.println("    useAuditInfo = true;");
      PW.println("    Logging.setAuditFile(f);");
      PW.println("  }");
      PW.println("");
      PW.println("  public static boolean getAuditInfo() {");
      PW.println("    return useAuditInfo;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double max(double[] d) {");
      PW.println("    double max=d[0];");
      PW.println("    for (int i=0; i<d.length; i++) if (d[i]>max) max=d[i];");
      PW.println("    return max;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double min(double[] d) {");
      PW.println("    double min=d[0];");
      PW.println("    for (int i=0; i<d.length; i++) if (d[i]<min) min=d[i];");
      PW.println("    return min;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double log10(double d) {");
      PW.println("    return (Math.log(d)/Math.log(10));");
      PW.println("  }");
      PW.println("");
      PW.println("  public static boolean or(boolean[] b) {");
      PW.println("    boolean r = b[0];");
      PW.println("    int i=1;");
      PW.println("    while ((!r)&&(i<b.length)) r = b[i++];");
      PW.println("    return r;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static boolean and(boolean[] b) {");
      PW.println("    boolean r = b[0];");
      PW.println("    int i=1;");
      PW.println("    while ((r)&&(i<b.length)) r = b[i++];");
      PW.println("    return r;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double delta(double x) {");
      PW.println("    return (SysVars.stepInHours*x);");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double rnd(double a) {");
      PW.println("    double x = rnd.raw();");
      PW.println("    return x*a;");
      PW.println("  }");
      PW.println("");
      PW.println("");
      PW.println("  public static PLayer findPLayer(double dd) {");
      PW.println("    int d = (int)Math.floor(dd);");
      PW.println("    if (d>=500) return (PLayer) Kernel.W.P_LayerList.get(Kernel.W.P_LayerList.size()-1);");
      PW.println("    else if (d==0) return (PLayer) Kernel.W.P_LayerList.get(0);");
      PW.println("    else if (d>1) {");
      PW.println("      int i=21;");
      PW.println("      PLayer P = (PLayer) Kernel.W.P_LayerList.get(d+i);");
      PW.println("      if (P.Depth<d) {");
      PW.println("        while (P.Depth<d) P = (PLayer) Kernel.W.P_LayerList.get(d+(++i));");
      PW.println("        P = (PLayer) Kernel.W.P_LayerList.get(d+(i-1));");
      PW.println("      } else if (P.Depth>d) while (P.Depth>d) P = (PLayer) Kernel.W.P_LayerList.get(d+(--i));");
      PW.println("      return P;");
      PW.println("    } else {");
      PW.println("      PLayer P = (PLayer) Kernel.W.P_LayerList.get(0);");
      PW.println("      int i=0;");
      PW.println("      while (P.Depth<dd) P = (PLayer) Kernel.W.P_LayerList.get(++i);");
      PW.println("      return (PLayer) Kernel.W.P_LayerList.get(i-1);");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      PW.println("  public static int findPLayerID(double dd) {");
      PW.println("    int d = (int)Math.floor(dd);");
      PW.println("    int result;");
      PW.println("    if (d>=500) return Kernel.W.P_LayerList.size()-1;");
      PW.println("    else if (d==0) return 0;");
      PW.println("    else if (d>1) {");
      PW.println("      int i=21;");
      PW.println("      PLayer P = (PLayer) Kernel.W.P_LayerList.get(d+i);");
      PW.println("      result = d+i;");
      PW.println("      if (P.Depth<d) {");
      PW.println("        while (P.Depth<d) P = (PLayer) Kernel.W.P_LayerList.get(d+(++i));");
      PW.println("        P = (PLayer) Kernel.W.P_LayerList.get(d+(i-1));");
      PW.println("        result = d+(i-1);");
      PW.println("      } else if (P.Depth>d) {");
      PW.println("        while (P.Depth>d) P = (PLayer) Kernel.W.P_LayerList.get(d+(--i));");
      PW.println("        result = d+i;");
      PW.println("      }");
      PW.println("      return result;");
      PW.println("    } else {");
      PW.println("      PLayer P = (PLayer) Kernel.W.P_LayerList.get(0);");
      PW.println("      int i=0;");
      PW.println("      while (P.Depth<d) P = (PLayer) Kernel.W.P_LayerList.get(++i);");
      PW.println("      return i-1;");
      PW.println("    }");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getSalinity(double d) {");
      PW.println("    return findPLayer(d).Salinity;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getSalinity(BLayer b) {");
      PW.println("    return getSalinity(b.Depth);");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getTemperature(double d) {");
      PW.println("    final PLayer p = findPLayer(d);");
      PW.println("    return p.Temp+p.TempAdj;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getPureTemperature(double d) {");
      PW.println("    return findPLayer(d).Temp;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getTemperature(BLayer b) {");
      PW.println("    return getTemperature(b.Depth);");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getFullIrrad(double d) {");
      PW.println("    return findPLayer(d).Full_Irrad;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getFullIrrad(BLayer b) {");
      PW.println("    return getFullIrrad(b.Depth);");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getIrradBetween(PLayer P, int startBand, int endBand) {");
      PW.println("    double total = 0;");
      PW.println("    for (int i=startBand; i<endBand; i++) total+= P.irrad[i];");
      PW.println("    return total;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getIrradBetween(BLayer b, int startBand, int endBand) {");
      PW.println("    return getIrradBetween(findPLayer(b.Depth),startBand,endBand);");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getIrradBetween(double d, int startBand, int endBand) {");
      PW.println("    return getIrradBetween(findPLayer(d),startBand,endBand);");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getUVIrrad(PLayer P) { return getIrradBetween(P,0,1); }");
      PW.println("  public static double getUVIrrad(BLayer b) { return getIrradBetween(findPLayer(b.Depth),0,1); }");
      PW.println("  public static double getUVIrrad(double d) { return getIrradBetween(findPLayer(d),0,1); }");
      PW.println("");
      PW.println("  public static double getDepthForFI(double fi) {");
      PW.println("    int z=0;");
      PW.println("    while (z<Kernel.W.P_LayerList.size() && (((PLayer)Kernel.W.P_LayerList.get(z)).Full_Irrad>fi)) z++;");
      PW.println("    if (z>Kernel.W.P_LayerList.size()) z--;");
      PW.println("    return ((PLayer)Kernel.W.P_LayerList.get(z)).Depth;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getDepthForVI(double vi) {");
      PW.println("    int z=0;");
      PW.println("    while (z<Kernel.W.P_LayerList.size() && (((PLayer)Kernel.W.P_LayerList.get(z)).Vis_Irrad>vi)) z++;");
      PW.println("    if (z>=Kernel.W.P_LayerList.size()) z--;");
      PW.println("    return ((PLayer)Kernel.W.P_LayerList.get(z)).Depth;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getVisIrrad(double d) {");
      PW.println("    return findPLayer(d).Vis_Irrad;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getDensity(double d) {");
      PW.println("    return findPLayer(d).Density;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static BLayer findBLayer(double z) {");
      PW.println("    //System.out.println(\"FIND BLAYER \"+z);");
      PW.println("    if (z>=500) z = 499.999;");
      PW.println("    if (z<0) z = 0;");
      PW.println("    return Kernel.W.B_Layer[(int) Math.floor(z)];");
      PW.println("  }");
      PW.println("");
      PW.println("  public static InitialDataObject getInitialData() {");
      PW.println("    try {");
      PW.println("      java.util.jar.JarFile JF = new java.util.jar.JarFile(Launcher.JarPath+File.separator+\"VEW.jar\");");
      PW.println("      java.util.jar.JarEntry JE = JF.getJarEntry(\"InitialConditions.vso\");");
      PW.println("      return (InitialDataObject) (new ObjectInputStream(new DataInputStream(");
      PW.println("        new BufferedInputStream(JF.getInputStream(JE)))).readObject());");
      PW.println("    } catch (Exception e) { e.printStackTrace(); return null; }");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double[] getNutrient(InitialDataObject ID, String Nutrient) {");
      PW.println("    int i = 0;");
      PW.println("    while ((i<ID.NutrientName.length) && (!ID.NutrientName[i].equals(Nutrient))) i++;");
      PW.println("");
      PW.println("    if (i==ID.NutrientName.length) {");
      PW.println("      double[] TempReturn = new double[501];");
      PW.println("      for (int j=0; j<501; j++) TempReturn[j]=-99.9999;");
      PW.println("      return TempReturn;");
      PW.println("    } else return ID.NutrientProfile[i];");
      PW.println("  }");
      PW.println("");
      PW.println("  public static int getBoundaryIndex(BoundaryDataHeader h, String n) {");
      PW.println("    int i=0;");
      PW.println("    while ((i<h.FieldNames.length) && (!h.FieldNames[i].equals(n))) i++;");
      PW.println("    if (i>=h.FieldNames.length) i=-1;");
      PW.println("    return i;");
      PW.println("  }");
      PW.println("");
      PW.println("  public static double getBoundaryData(BoundaryDataHeader h, BoundaryDataStep s, String n) {");
      PW.println("    int i=0;");
      PW.println("    while (!h.FieldNames[i].equals(n)) i++;");
      PW.println("    return s.BoundaryData[i];");
      PW.println("  }");
      PW.println("}");
      PW.flush();
      PW.close();
    } catch (Exception e) { e.printStackTrace(); }
  }
}

