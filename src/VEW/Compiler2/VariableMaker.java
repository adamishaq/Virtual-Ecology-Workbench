package VEW.Compiler2;

import java.io.PrintWriter;

import VEW.Common.StringTools;
import VEW.Common.XML.XMLTag;


public class VariableMaker {
  public static void writeVariableJava(String fileName, XMLTag model) {
    try {
      PrintWriter PW = StringTools.OpenOutputFile(fileName);
      PW.println("package VEW.Sim;");
      PW.println("");
      PW.println("public class Variable");
      PW.println("{");
      PW.println("  protected double CurrentValue;  // Value of the variable that will be returned as the current value.");
      PW.println("  protected double BufferedValue; // Buffered base value of the variable.");
      PW.println("  protected double Delta;         // Amount to add to buffered base value.");
      PW.println("  ");
      PW.println("  private final static String ErrorMessage1 = \"Attempt to access an undocumented history.\";");
      PW.println("  ");
      PW.println("  protected Variable(double CurrentValue, double BufferedValue, double Delta)");
      PW.println("  {");
      PW.println("    this.CurrentValue  = CurrentValue;");
      PW.println("    this.BufferedValue = BufferedValue;");
      PW.println("    this.Delta         = Delta;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public static Variable getInstance()");
      PW.println("  {");
      PW.println("    return new Variable(0.0, 0.0, 0.0);");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public static Variable getInstance(double InitialValue, int HistoryLength)");
      PW.println("  {");
      PW.println("    if (HistoryLength<0) HistoryLength=-HistoryLength;");
      PW.println("");
      PW.println("    if(HistoryLength < 2)");
      PW.println("    {");
      PW.println("      return new Variable(InitialValue, InitialValue, 0.0);");
      PW.println("    }");
      PW.println("    else");
      PW.println("    {");
      PW.println("      return new Variable.HistoryVariable(HistoryLength, InitialValue, InitialValue, 0.0);");
      PW.println("    }");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public static Variable getInstance(double InitialValue)");
      PW.println("  {");
      PW.println("    return new Variable(InitialValue, InitialValue, 0.0);");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public static Variable getInstance(double InitialValue, String VariableName)");
      PW.println("  {");
      PW.println("    return new MonitoredVariable(InitialValue, InitialValue, 0.0, VariableName);");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public double get()");
      PW.println("  {");
      PW.println("    return CurrentValue;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public double getHistory(double History)");
      PW.println("  {");
      PW.println("    return getHistory((int)History);");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public double getHistory(int History)");
      PW.println("  {");
      PW.println("    if(History == 0)");
      PW.println("    {");
      PW.println("      return CurrentValue;");
      PW.println("    }");
      PW.println("    else");
      PW.println("    {");
      PW.println("      System.err.println(ErrorMessage1);");
      PW.println("      throw new ArrayIndexOutOfBoundsException();");
      PW.println("    }");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public double getDelta()");
      PW.println("  {");
      PW.println("    return Delta;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public double getVal()");
      PW.println("  {");
      PW.println("    return BufferedValue;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public double getLatest()");
      PW.println("  {");
      PW.println("    return BufferedValue + Delta;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public void set(double NewBaseValue)");
      PW.println("  {");
      PW.println("    BufferedValue = NewBaseValue;");
      PW.println("    Delta = 0.0;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public void setNow(double NewValue)");
      PW.println("  {");
      PW.println("    CurrentValue = NewValue;");
      PW.println("    BufferedValue = NewValue;");
      PW.println("    Delta = 0.0;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public void setDelta(double Change)");
      PW.println("  {");
      PW.println("    Delta += Change;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public void averageWith(Variable OtherVar, double OurCellCount, double TheirCellCount)");
      PW.println("  {");
      PW.println("    if ((OtherVar.CurrentValue!=CurrentValue) || (OtherVar.BufferedValue!=BufferedValue) || (OtherVar.Delta!=Delta)) {");
      PW.println("      double TotalCells = OurCellCount + TheirCellCount;");
      PW.println("      if (TotalCells==0) {");
      PW.println("        OurCellCount = 1;");
      PW.println("        TheirCellCount = 1;");
      PW.println("        TotalCells=2;");
      PW.println("      }");
      PW.println("      Delta *= OurCellCount;");
      PW.println("      Delta += OtherVar.Delta * TheirCellCount;");
      PW.println("      Delta /= TotalCells;");
      PW.println("      CurrentValue *= OurCellCount;");
      PW.println("      CurrentValue += OtherVar.CurrentValue * TheirCellCount;");
      PW.println("      CurrentValue /= TotalCells;");
      PW.println("      BufferedValue *= OurCellCount;");
      PW.println("      BufferedValue += OtherVar.BufferedValue * TheirCellCount;");
      PW.println("      BufferedValue /= TotalCells;");
      PW.println("    }");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public void combineWith(Variable OtherVar)");
      PW.println("  {");
      PW.println("    Delta += OtherVar.Delta;");
      PW.println("    CurrentValue  += OtherVar.CurrentValue;");
      PW.println("    BufferedValue += OtherVar.BufferedValue;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public void copyContents(Variable OtherVar)");
      PW.println("  {");
      PW.println("    CurrentValue  = OtherVar.CurrentValue;");
      PW.println("    Delta         = OtherVar.Delta;");
      PW.println("    BufferedValue = OtherVar.BufferedValue;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public Variable cloneVar()");
      PW.println("  {");
      PW.println("    return new Variable(CurrentValue, BufferedValue, Delta);");
      PW.println("  }");
      PW.println("");
      PW.println("  public void shiftHistory()");
      PW.println("  {");
      PW.println("    CurrentValue  = BufferedValue + Delta;");
      PW.println("    BufferedValue = CurrentValue;");
      PW.println("    Delta         = 0;");
      PW.println("  }");
      PW.println("");
      PW.println("  public void writeSnapshot(java.io.DataOutputStream snapshot) {");
      PW.println("    try");
      PW.println("    {");
      PW.println("      snapshot.writeInt(1);");
      PW.println("      snapshot.writeDouble(Delta);");
      PW.println("      snapshot.writeDouble(BufferedValue);");
      PW.println("      snapshot.writeDouble(CurrentValue);");
      PW.println("    }");
      PW.println("    catch(Exception e) { e.printStackTrace(); }");
      PW.println("  }");
      PW.println("");
      PW.println("  public static Variable readSnapshot(java.io.DataInputStream snapshot)");
      PW.println("  {");
      PW.println("    try");
      PW.println("    {");
      PW.println("      int HistoryLength    = snapshot.readInt();");
      PW.println("      double Delta         = snapshot.readDouble();");
      PW.println("      double BufferedValue = snapshot.readDouble();");
      PW.println("      double CurrentValue  = snapshot.readDouble();");
      PW.println("      if(HistoryLength == 1)");
      PW.println("      {");
      PW.println("        return new Variable(CurrentValue, BufferedValue, Delta);");
      PW.println("      }");
      PW.println("      else");
      PW.println("      {");
      PW.println("        HistoryVariable H = new Variable.HistoryVariable(HistoryLength, CurrentValue, BufferedValue, Delta);");
      PW.println("        for(int i = 0; i < HistoryLength - 1; i++)");
      PW.println("        {");
      PW.println("          H.HistoryBuffer[i] = snapshot.readDouble();");
      PW.println("        }");
      PW.println("        return H;");
      PW.println("      }");
      PW.println("    }");
      PW.println("    catch(Exception e) { e.printStackTrace(); }");
      PW.println("    return null;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  private static class MonitoredVariable extends Variable");
      PW.println("  {");
      PW.println("    private String VarName;");
      PW.println("    ");
      PW.println("    MonitoredVariable(double CurrentValue, double BufferedValue, double Delta, String VariableName)");
      PW.println("    {");
      PW.println("      super(CurrentValue, BufferedValue, Delta);");
      PW.println("      VarName = VariableName;");
      PW.println("    }");
      PW.println("    ");
      PW.println("    public void set(double NewBaseValue)");
      PW.println("    {");
      PW.println("      System.out.println(\"Setting new base value of \"+ VarName + \" to: \" + NewBaseValue);");
      PW.println("      super.set(NewBaseValue);");
      PW.println("    }");
      PW.println("");
      PW.println("    public void setNow(double NewValue)");
      PW.println("    {");
      PW.println("      System.out.println(\"Setting new base value of \"+ VarName + \" to: \" + NewValue);");
      PW.println("      super.setNow(NewValue);");
      PW.println("    }");
      PW.println("");
      PW.println("    public void setDelta(double Change)");
      PW.println("    {");
      PW.println("      System.out.println(\"Incrementing Delta-\"+ VarName + \" by: \" + Change);");
      PW.println("      super.setDelta(Change);");
      PW.println("    }");
      PW.println("");
      PW.println("    public void shiftHistory()");
      PW.println("    {");
      PW.println("      System.out.println(\"Shifting the history of \"+ VarName);");
      PW.println("      super.shiftHistory();");
      PW.println("    }");
      PW.println("  }");
      PW.println("  ");
      PW.println("  private static class HistoryVariable extends Variable");
      PW.println("  {");
      PW.println("    double[] HistoryBuffer;");
      PW.println("    HistoryVariable(int HistoryLength, double CurrentValue, double BufferedValue, double Delta)");
      PW.println("    {");
      PW.println("      super(CurrentValue, BufferedValue, Delta);");
      PW.println("      HistoryBuffer = new double[HistoryLength - 1];");
      PW.println("      java.util.Arrays.fill(HistoryBuffer, CurrentValue);");
      PW.println("    }");
      PW.println("    ");
      PW.println("    HistoryVariable(double[] HistoryBuffer, double CurrentValue, double BufferedValue, double Delta)");
      PW.println("    {");
      PW.println("      super(CurrentValue, BufferedValue, Delta);");
      PW.println("      this.HistoryBuffer = (double[])HistoryBuffer.clone();");
      PW.println("    }");
      PW.println("    ");
      PW.println("    public double getHistory(int History)");
      PW.println("    {");
      PW.println("      if(History == 0)");
      PW.println("      {");
      PW.println("        return CurrentValue;");
      PW.println("      }");
      PW.println("      else if(History <= HistoryBuffer.length)");
      PW.println("      {");
      PW.println("        return HistoryBuffer[History - 1];");
      PW.println("      }");
      PW.println("      else");
      PW.println("      {");
      PW.println("        System.err.println(ErrorMessage1);");
      PW.println("        throw new ArrayIndexOutOfBoundsException();");
      PW.println("      }");
      PW.println("    }");
      PW.println("    ");
      PW.println("    public void averageWith(Variable OtherOne, double OurCellCount, double TheirCellCount)");
      PW.println("    {");
      PW.println("      if ((OtherOne.CurrentValue!=CurrentValue) || (OtherOne.BufferedValue!=BufferedValue) || (OtherOne.Delta!=Delta)) {");
      PW.println("        HistoryVariable OtherVar = (HistoryVariable)OtherOne;");
      PW.println("        double TotalCells = OurCellCount + TheirCellCount;");
      PW.println("        Delta *= OurCellCount;");
      PW.println("        Delta += OtherVar.Delta * TheirCellCount;");
      PW.println("        Delta /= TotalCells;");
      PW.println("        CurrentValue *= OurCellCount;");
      PW.println("        CurrentValue += OtherVar.CurrentValue * TheirCellCount;");
      PW.println("        CurrentValue /= TotalCells;");
      PW.println("        BufferedValue *= OurCellCount;");
      PW.println("        BufferedValue += OtherVar.BufferedValue * TheirCellCount;");
      PW.println("        BufferedValue /= TotalCells;");
      PW.println("        for(int i = 0; i < HistoryBuffer.length && i < OtherVar.HistoryBuffer.length; i++) {");
      PW.println("          HistoryBuffer[i] *= OurCellCount;");
      PW.println("          HistoryBuffer[i] += OtherVar.HistoryBuffer[i] * TheirCellCount;");
      PW.println("          HistoryBuffer[i] /= TotalCells;");
      PW.println("        }");
      PW.println("      }");
      PW.println("    }");
      PW.println("    ");
      PW.println("    public void combineWith(Variable OtherOne)");
      PW.println("    {");
      PW.println("      HistoryVariable OtherVar = (HistoryVariable)OtherOne;");
      PW.println("      Delta += OtherVar.Delta;");
      PW.println("      CurrentValue  += OtherVar.CurrentValue;");
      PW.println("      BufferedValue += OtherVar.BufferedValue;");
      PW.println("      for(int i = 0; i < HistoryBuffer.length && i < OtherVar.HistoryBuffer.length; i++)");
      PW.println("      {");
      PW.println("        HistoryBuffer[i] += OtherVar.HistoryBuffer[i];");
      PW.println("      }");
      PW.println("    }");
      PW.println("  ");
      PW.println("    public void copyContents(Variable OtherOne)");
      PW.println("    {");
      PW.println("      HistoryVariable OtherVar = (HistoryVariable)OtherOne;");
      PW.println("      CurrentValue  = OtherVar.CurrentValue;");
      PW.println("      Delta         = OtherVar.Delta;");
      PW.println("      BufferedValue = OtherVar.BufferedValue;");
      PW.println("      HistoryBuffer = (double[])OtherVar.HistoryBuffer.clone();");
      PW.println("    }");
      PW.println("  ");
      PW.println("    public Variable cloneVar()");
      PW.println("    {");
      PW.println("      return new HistoryVariable(HistoryBuffer, CurrentValue, BufferedValue, Delta);");
      PW.println("    }");
      PW.println("");
      PW.println("    public void shiftHistory()");
      PW.println("    {");
      PW.println("      for (int i = HistoryBuffer.length - 1; i > 0; i--)");
      PW.println("      {");
      PW.println("        HistoryBuffer[i] = HistoryBuffer[i-1];");
      PW.println("      }");
      PW.println("      HistoryBuffer[0] = CurrentValue;");
      PW.println("      CurrentValue  = BufferedValue + Delta;");
      PW.println("      BufferedValue = CurrentValue;");
      PW.println("      Delta         = 0;");
      PW.println("    }");
      PW.println("");
      PW.println("    public void writeSnapshot(java.io.DataOutputStream snapshot) {");
      PW.println("      try");
      PW.println("      {");
      PW.println("        snapshot.writeInt(HistoryBuffer.length + 1);");
      PW.println("        snapshot.writeDouble(Delta);");
      PW.println("        snapshot.writeDouble(BufferedValue);");
      PW.println("        snapshot.writeDouble(CurrentValue);");
      PW.println("        for(int i = 0; i < HistoryBuffer.length; i++)");
      PW.println("        {");
      PW.println("          snapshot.writeDouble(HistoryBuffer[i]);");
      PW.println("        }");
      PW.println("      }");
      PW.println("      catch(Exception e) { e.printStackTrace(); }");
      PW.println("    }");
      PW.println("  }");
      PW.println("}");
      PW.flush();
      PW.close();
    } catch (Exception e) { e.printStackTrace(); }

  }

}

