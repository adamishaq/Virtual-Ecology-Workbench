package VEW.Compiler2;

import java.io.PrintWriter;

import VEW.Common.StringTools;
import VEW.Common.XML.XMLTag;

public class SimMaker {
  public static void writeSimJava(String fileName, XMLTag model) {
    try {
      PrintWriter PW = StringTools.OpenOutputFile(fileName);
      PW.println("package VEW.Sim;");
      PW.println("");
      PW.println("import java.io.*;");
      PW.println("");
      PW.println("import VEW.Common.*;");
      PW.println("import VEW.Sim.Kernel;");
      PW.println("import VEW.Sim.SysVars;");
      PW.println("");
      PW.println("public class Sim {");
      PW.println("  private static String latestTime = null;");
      PW.println("  private static String flusherName = null;");
      PW.println("  private static String abortName = null;  ");
      PW.println("  private static String startName = null;");
      PW.println("  private static String endName = null;");
      PW.println("  ");
      PW.println("  ");
      PW.println("  public static boolean checkAbort() {");
      PW.println("    try {");
      PW.println("      File f = new File(abortName);");
      PW.println("      if (f.exists()) {");
      PW.println("        f.delete();");
      PW.println("        return true;");
      PW.println("      } else return false;");
      PW.println("    } catch (Exception e) { e.printStackTrace(); }");
      PW.println("    return false;");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public static void checkFlusher() {");
      PW.println("    try {");
      PW.println("      File f = new File(flusherName);");
      PW.println("      if (f.exists()) {");
      PW.println("        f.delete();");
      PW.println("        Logging.flush();");
      PW.println("      }");
      PW.println("    } catch (Exception e) { e.printStackTrace(); }");
      PW.println("  }");
      PW.println("  ");
      PW.println("  public static void writeTimeTextFile(long ts) {");
      PW.println("    try {");
      PW.println("      PrintWriter P = new PrintWriter(new FileOutputStream(new File(latestTime)));");
      PW.println("      P.write(String.valueOf(ts)+\"\\n\");");
      PW.println("      P.flush();");
      PW.println("      P.close();");
      PW.println("      P = null;");
      PW.println("    } catch (Exception e) { if (!(e instanceof FileNotFoundException)) e.printStackTrace(); }");
      PW.println("  }");
      PW.println("");
      PW.println("  public static void writeTime(String file) {");
      PW.println("    try {");
      PW.println("      PrintWriter P = new PrintWriter(new FileOutputStream(new File(file)));");
      PW.println("      P.write(new String(System.currentTimeMillis()+\"\\n\"));");
      PW.println("      P.flush();");
      PW.println("      P.close();");
      PW.println("      P = null;");
      PW.println("    } catch (Exception e) { if (!(e instanceof FileNotFoundException)) e.printStackTrace(); }");
      PW.println("  }");
      PW.println("");
      PW.println("  public static void main(String[] args) throws Exception  {");
      PW.println("    System.out.println(\"This method of simulation execution is no longer supported, please use 'java -jar VEW.jar' instead.\");");
      PW.println("  }");
      PW.println("   ");
      PW.println("  public static void Launch() throws Exception { ");
      PW.println("    startName = new String(Launcher.JarPath+File.separator+\"start.txt\");");
      PW.println("    endName = new String(Launcher.JarPath+File.separator+\"end.txt\");");
      PW.println("    writeTime(startName);");
      PW.println("    Kernel.println(\"VEW 4, (C) 2009, VEW Research Group\");");
      PW.println("    Kernel.DTime = SysVars.getHourOfDay(SysVars.startTime);");
      PW.println("    SysVars.init();");
      PW.println("    Kernel.W = new WaterCol();");
      PW.println("    SysVars.CallInits();");
      PW.println("    Kernel.timeSteps=0;");
      PW.println("    java.util.jar.JarFile JF = new java.util.jar.JarFile(Launcher.JarPath+File.separator+\"VEW.jar\");");
      PW.println("    java.util.jar.JarEntry JE = JF.getJarEntry(\"BoundaryConditions.vso\");");
      PW.println("    latestTime = new String(Launcher.JarPath+File.separator+\"latest.txt\");");
      PW.println("    flusherName = new String(Launcher.JarPath+File.separator+\"flush.txt\");");
      PW.println("    startName = new String(Launcher.JarPath+File.separator+\"start.txt\");");
      PW.println("    endName = new String(Launcher.JarPath+File.separator+\"end.txt\");");
      PW.println("    abortName = new String(Launcher.JarPath+File.separator+\"abort.txt\");    ");
      PW.println("    ObjectInputStream boundaryData = new ObjectInputStream(JF.getInputStream(JE));");
      PW.println("    BoundaryDataStep cds = null;");
      PW.println("    long actualStartTime = SysVars.startTime;");
      PW.println("    Kernel.myTime = SysVars.startTime;");
      PW.println("    if (Logging.readingFromSnapshot()) {");
      PW.println("      Logging.readSnapshot();      ");
      PW.println("      if (SysVars._skipBoundary) {");
      PW.println("        System.out.println(\"Jumpstart T = \"+SysVars._firstExecTime+\" - reading data...\");");
      PW.println("        for (long d=SysVars.startTime; d<=SysVars._firstExecTime; d+=SysVars.stepInMillis) {");
      PW.println("          cds = (BoundaryDataStep) boundaryData.readObject();");
      PW.println("          Kernel.timeSteps++;");
      PW.println("          Kernel.myTime += SysVars.stepInMillis;");
      PW.println("        }");
      PW.println("        actualStartTime=Kernel.myTime;");
      PW.println("        ");
      PW.println("      }");
      PW.println("    }");
      PW.println("    ");
      PW.println("    Kernel.println(\"Done\");");
      PW.println("    try {");
      PW.println("      for (Kernel.myTime = actualStartTime; Kernel.myTime<SysVars.endTime; Kernel.myTime+=SysVars.stepInMillis) {");
      PW.println("        SysVars.handleDistributions();");
      PW.println("        //System.out.println(Kernel.timeSteps+\" : \"+Kernel.myTime+\" (from \"+SysVars.startTime+\" to \"+SysVars.endTime+\")\");");
      PW.println("        SysVars._gmtDay = SysVars.getDayOfYear(Kernel.myTime);");
      PW.println("        SysVars._gmtLeap = SysVars.getLeapFlag(Kernel.myTime);");
      PW.println("        if (Kernel.timeSteps%10==0) writeTimeTextFile(Kernel.timeSteps);");
      PW.println("        checkFlusher();");
      PW.println("        cds = (BoundaryDataStep) boundaryData.readObject();");
      PW.println("        SysVars.readBoundaryStep(cds);");
      PW.println("          ");
      PW.println("        /*if(Kernel.myTime % 8760 == 0)");
      PW.println("          {");
      PW.println("            Kernel.W.Cooling.setNow(cds.BoundaryData[coolingIndex] * 2);");
      PW.println("          }*/");
      PW.println("        SysVars.doEvents();");
      PW.println("        Kernel.W.updatePhysics();");
      PW.println("        Kernel.W.updateChemistry();");
      PW.println("        Kernel.W.updateBiology();");
      PW.println("        Kernel.W.agentManagement();");
      PW.println("        Kernel.W.handleDepletion();");
      PW.println("        Kernel.DTime+=SysVars.stepInHours;");
      PW.println("        if (Kernel.DTime>23.9999) {");
      PW.println("          Kernel.DTime = 0;");
      PW.println("          Kernel.W.Max_MLD=0.0;");
      PW.println("          Kernel.W.Min_MLD=Kernel.W.MLDepth;");
      PW.println("          Kernel.W.YDay++;");
      PW.println("          if (Kernel.W.YDay == 365) {");
      PW.println("            Kernel.W.YDay=0;");
      PW.println("            Kernel.W.NInj_Count++;");
      PW.println("            if (Kernel.W.NInj_Count == Kernel.W.Nitro_Inj) {");
      PW.println("              Kernel.W.NInj_Count = 0;");
      PW.println("            }");
      PW.println("          }");
      PW.println("        }");
      PW.println("        Logging.checkWriteSnap();");
      PW.println("        Kernel.timeSteps++;");
      PW.println("        if (checkAbort()) Kernel.myTime = SysVars.endTime+1;");
      PW.println("      } ");
      PW.println("    } catch (Exception e) { e.printStackTrace(); }");
      PW.println("    Logging.close();");
      PW.println("    writeTime(endName);");
      PW.println("  }");
      PW.println("}");
      PW.flush();
      PW.close();      
    } catch (Exception e) { e.printStackTrace(); }

  }

}

